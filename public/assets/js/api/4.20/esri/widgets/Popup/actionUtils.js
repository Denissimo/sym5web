// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/Logger","./actions"],function(g,m,f,z,e){function u(a){const {selectedFeature:c,location:d,view:b}=a;return b?"3d"===b.type?c||d:a.get("selectedFeature.geometry")||d:null}function v(a,c){if("3d"!==(null==c?void 0:c.type)||!a||"esri.Graphic"!==a.declaredClass)return!0;if((c=c.getViewForGraphic(a))&&"whenGraphicBounds"in c){let d=!1;c.whenGraphicBounds(a,{useViewElevation:!0}).then(b=>{d=!b||!b.boundingBox||b.boundingBox[0]===
b.boundingBox[3]&&b.boundingBox[1]===b.boundingBox[4]&&b.boundingBox[2]===b.boundingBox[5]}).catch(()=>{const b=new f("zoom-to:invalid-graphic","Could not zoom to the location of the graphic.",{graphic:a});k.error(b)});return d}return!0}function w(a){return n.apply(this,arguments)}function n(){n=m._asyncToGenerator(function*(a){const {location:c,selectedFeature:d,view:b,zoomFactor:l}=a,h=u(a);if(!h)return a=new f("zoom-to:invalid-target-or-view","Cannot zoom to location without a target and view.",
{target:h,view:b}),k.error(a),Promise.reject(a);const A=b.scale/l,p=a.get("selectedFeature.geometry")||c,x=p&&"point"===p.type&&v(d,b);e.zoomToFeature.active=!0;e.zoomToFeature.disabled=!0;yield a.view.goTo({target:h,scale:x?A:void 0});e.zoomToFeature.active=!1;e.zoomToFeature.disabled=!1;a.zoomToLocation=null;x&&(a.location=p)});return n.apply(this,arguments)}function y(a){return q.apply(this,arguments)}function q(){q=m._asyncToGenerator(function*(a){const {selectedFeature:c,view:d}=a;if("2d"!==
(null==d?void 0:d.type))throw a=new f("zoomToCluster:invalid-view","View must be 2d MapView.",{view:d}),k.error(a),a;if(!c.isAggregate)throw a=new f("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:c}),k.error(a),a;a=yield d.whenLayerView(c.sourceLayer);const b=a.createQuery();b.aggregateIds=[c.getObjectId()];e.zoomToClusteredFeatures.active=!0;e.zoomToClusteredFeatures.disabled=!0;({extent:a}=yield a.queryExtent(b));yield d.goTo({target:a});
e.zoomToClusteredFeatures.active=!1;e.zoomToClusteredFeatures.disabled=!1});return q.apply(this,arguments)}function r(){r=m._asyncToGenerator(function*(a){const {selectedFeature:c,view:d}=a;if("2d"!==(null==d?void 0:d.type))throw a=new f("displayClusterExtent:invalid-view","View must be 2d MapView.",{view:d}),k.error(a),a;if(!c.isAggregate)throw a=new f("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:c}),k.error(a),a;var b=yield d.whenLayerView(c.sourceLayer);
const l=b.createQuery();l.aggregateIds=[c.getObjectId()];({extent:b}=yield b.queryExtent(l));a.selectedClusterBoundaryFeature.geometry=b;d.graphics.add(a.selectedClusterBoundaryFeature)});return r.apply(this,arguments)}function t(){t=m._asyncToGenerator(function*(a){const {selectedFeature:c,view:d}=a;if("2d"!==(null==d?void 0:d.type))throw a=new f("browseAggregateFeatures:invalid-view","View must be 2d MapView.",{view:d}),k.error(a),a;if(!c.isAggregate)throw a=new f("browseAggregateFeatures:invalid-selectedFeature",
"Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:c}),k.error(a),a;a=yield d.whenLayerView(c.sourceLayer);const b=a.createQuery();b.aggregateIds=[c.getObjectId()];e.browseClusteredFeatures.active=!0;e.browseClusteredFeatures.disabled=!0;({features:a}=yield a.queryFeatures(b));e.browseClusteredFeatures.active=!1;e.browseClusteredFeatures.disabled=!1;d.popup.open({features:[c].concat(a),featureMenuOpen:!0})});return t.apply(this,arguments)}const k=z.getLogger("esri.widgets.Popup.PopupViewModel");
g.browseAggregateFeatures=function(a){return t.apply(this,arguments)};g.displayClusterExtent=function(a){return r.apply(this,arguments)};g.getSelectedTarget=u;g.isZoomScreenSize=v;g.removeClusteredFeaturesForBrowsing=function(a){a.features=a.features.filter(c=>c.isAggregate)};g.triggerAction=function(a){const {event:c,view:d}=a;({action:a}=c);var b=d&&d.popup;if(!a)return Promise.reject(new f("trigger-action:missing-arguments","Event has no action"));if(!b)return Promise.reject(new f("trigger-action:missing-arguments",
"view.popup is missing"));const {disabled:l,id:h}=a;if(!h)return Promise.reject(new f("trigger-action:invalid-action","action.id is missing"));if(l)return Promise.reject(new f("trigger-action:invalid-action","Action is disabled"));if(h===e.zoomToFeature.id)return w(b.viewModel);if(h===e.zoomToClusteredFeatures.id)return y(b.viewModel);if(h===e.browseClusteredFeatures.id)return b.featureMenuOpen=!b.featureMenuOpen,b.viewModel.browseClusterEnabled=!b.viewModel.browseClusterEnabled,Promise.resolve();
b.viewModel.browseClusterEnabled=!1;if(h===e.removeSelectedFeature.id){b.close();({selectedFeature:a}=b);if(!a)return Promise.reject(new f(`trigger-action:${e.removeSelectedFeature.id}`,"selectedFeature is required",{selectedFeature:a}));({sourceLayer:b}=a);b?b.remove(a):d.graphics.remove(a)}return Promise.resolve()};g.zoomToClusterExtent=y;g.zoomToLocation=w;Object.defineProperty(g,"__esModule",{value:!0})});