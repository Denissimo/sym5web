// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define(["../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/workers/workers","./PixelBlock"],function(f,g,m,k){return function(){function l(){this._workerThread=null;this._destroyed=!1}var e=l.prototype;e.initialize=function(){var c=f._asyncToGenerator(function*(){const a=yield m.open("RasterWorker");this._destroyed?a.close():this._workerThread=a});return function(){return c.apply(this,arguments)}}();e.destroy=function(){this._destroyed=!0;this._workerThread&&(this._workerThread.close(),
this._workerThread=null)};e.decode=function(){var c=f._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");return(a=yield this._workerThread.invoke("decode",a,b))?new k(a):null});return function(a,b){return c.apply(this,arguments)}}();e.symbolize=function(){var c=f._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");a={extent:a.extent&&
a.extent.toJSON(),pixelBlock:a.pixelBlock.toJSON(),simpleStretchParams:a.simpleStretchParams,bandIds:a.bandIds};return(b=yield this._workerThread.invoke("symbolize",a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();e.updateSymbolizer=function(){var c=f._asyncToGenerator(function*(a,b){var d;if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");const h=null==a?void 0:null==(d=a.rendererJSON)?void 0:d.histograms;yield Promise.all(this._workerThread.broadcast("updateSymbolizer",
{symbolizerJSON:a.toJSON(),histograms:h},b))});return function(a,b){return c.apply(this,arguments)}}();e.stretch=function(){var c=f._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),stretchParams:a.stretchParams};return(b=yield this._workerThread.invoke("stretch",a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();
e.split=function(){var c=f._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),tileSize:a.tileSize,maximumPyramidLevel:a.maximumPyramidLevel};const d=yield this._workerThread.invoke("split",a,b);d&&d.forEach((h,n)=>{d.set(n,h?k.fromJSON(h):null)});return Promise.resolve(d)});return function(a,b){return c.apply(this,arguments)}}();e.estimateStatisticsHistograms=
function(){var c=f._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new g("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON()};b=yield this._workerThread.invoke("estimateStatisticsHistograms",a,b);return Promise.resolve(b)});return function(a,b){return c.apply(this,arguments)}}();e.mosaicAndTransform=function(){var c=f._asyncToGenerator(function*(a,b){var d;if(!this._workerThread)throw new g("raster-jobhandler:no-connection",
"no available worker connection");if(null==a||null==(d=a.srcPixelBlocks)||!d.length)return null;a={...a,srcPixelBlocks:a.srcPixelBlocks.map(h=>h?h.toJSON():null)};return(b=yield this._workerThread.invoke("mosaicAndTransform",a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();return l}()});