// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("require exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../request ../../core/Error ../../core/has ../../core/Logger ../../core/maybe ../../core/promiseUtils ../../core/urlUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/jsonMap ../../core/accessorSupport/decorators/reader ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/decorators/writer ../../core/accessorSupport/originUtils ../../geometry/Extent ../../geometry/HeightModelInfo ../../geometry/SpatialReference ../support/arcgisLayerUrl ../support/commonProperties ../support/I3SIndexInfo ../../portal/Portal ../../portal/PortalItem ../../webdoc/support/saveUtils".split(" "),
function(F,u,l,g,x,m,O,G,H,I,y,k,P,Q,q,J,K,z,v,L,w,r,A,M,B,N,C){const p=G.getLogger("esri.layers.mixins.SceneService"),D={getTypeKeywords:()=>[],portalItemLayerType:"unknown",validationOptions:{enabled:!0,ignoreUnsupported:!1,failPolicy:"throw"}};u.SCENE_SERVICE_ITEM_TYPE="Scene Service";u.SceneService=f=>{f=function(E){function t(){var a=E.apply(this,arguments)||this;a.spatialReference=null;a.fullExtent=null;a.heightModelInfo=null;a.minScale=0;a.maxScale=0;a.version={major:Number.NaN,minor:Number.NaN,
versionString:""};a.copyright=null;a.sublayerTitleMode="item-title";a.title=null;a.layerId=null;a.indexInfo=null;a._debouncedSaveOperations=I.debounce(function(){var b=l._asyncToGenerator(function*(c,d,e){switch(c){case 0:return a._save(d);case 1:return a._saveAs(e,d)}});return function(c,d,e){return b.apply(this,arguments)}}());return a}l._inheritsLoose(t,E);var h=t.prototype;h.readSpatialReference=function(a,b){return this._readSpatialReference(b)};h._readSpatialReference=function(a){if(null!=a.spatialReference)return w.fromJSON(a.spatialReference);
a=a.store;a=(a=a.indexCRS||a.geographicCRS)&&parseInt(a.substring(a.lastIndexOf("/")+1,a.length),10);return null!=a?new w(a):null};h.readFullExtent=function(a,b,c){if(null!=a&&"object"===typeof a)return v.fromJSON(a,c);a=b.store;b=this._readSpatialReference(b);return null==b||null==a||null==a.extent||!Array.isArray(a.extent)||a.extent.some(d=>-1E38>d)?null:new v({xmin:a.extent[0],ymin:a.extent[1],xmax:a.extent[2],ymax:a.extent[3],spatialReference:b})};h.readVersion=function(a,b){a=b.store;b=null!=
a.version?a.version.toString():"";a={major:Number.NaN,minor:Number.NaN,versionString:b};b=b.split(".");2<=b.length&&(a.major=parseInt(b[0],10),a.minor=parseInt(b[1],10));return a};h.readTitlePortalItem=function(a){return"item-title"!==this.sublayerTitleMode?void 0:a};h.readTitleService=function(a,b){a=this.portalItem&&this.portalItem.title;if("item-title"===this.sublayerTitleMode)return r.titleFromUrlAndName(this.url,b.name);b=b.name;if(!b&&this.url){const c=r.parse(this.url);H.isSome(c)&&(b=c.title)}"item-title-and-service-name"===
this.sublayerTitleMode&&a&&(b=a+" - "+b);return r.cleanTitle(b)};h.writeUrl=function(a,b,c,d){r.writeUrlWithLayerId(this,a,"layers",b,d)};h._fetchIndexAndUpdateExtent=function(){var a=l._asyncToGenerator(function*(b,c){this.indexInfo=M.fetchIndexInfo(this.parsedUrl.path,this.rootNode,b,this.apiKey,p,c);null==this.fullExtent||this.fullExtent.hasZ||this._updateExtent(yield this.indexInfo)});return function(b,c){return a.apply(this,arguments)}}();h._updateExtent=function(a){if("page"===(null==a?void 0:
a.type)){var b,c,d=a.rootIndex%a.pageSize;a=null==(b=a.rootPage)?void 0:null==(c=b.nodes)?void 0:c[d];if(null==a||null==a.obb||null==a.obb.center||null==a.obb.halfSize)throw new m("sceneservice:invalid-node-page","Invalid node page.");-1E38>a.obb.center[0]||null==this.fullExtent||this.fullExtent.hasZ||(b=a.obb.halfSize,c=a.obb.center[2],b=Math.sqrt(b[0]*b[0]+b[1]*b[1]+b[2]*b[2]),this.fullExtent.zmin=c-b,this.fullExtent.zmax=c+b)}else"node"===(null==a?void 0:a.type)&&(c=null==(d=a.rootNode)?void 0:
d.mbs,!Array.isArray(c)||4!==c.length||-1E38>c[0]||(b=c[2],c=c[3],this.fullExtent.zmin=b-c,this.fullExtent.zmax=b+c))};h._fetchService=function(){var a=l._asyncToGenerator(function*(b){if(null==this.url)throw new m("sceneservice:url-not-set","Scene service can not be loaded without valid portal item or url");if(null==this.layerId&&/SceneServer\/*$/i.test(this.url)){const c=yield this._fetchFirstLayerId(b);null!=c&&(this.layerId=c)}return this._fetchServiceLayer(b)});return function(b){return a.apply(this,
arguments)}}();h._fetchFirstLayerId=function(){var a=l._asyncToGenerator(function*(b){b=yield x(this.url,{query:{f:"json",token:this.apiKey},responseType:"json",signal:b});if(b.data&&Array.isArray(b.data.layers)&&0<b.data.layers.length)return b.data.layers[0].id});return function(b){return a.apply(this,arguments)}}();h._fetchServiceLayer=function(){var a=l._asyncToGenerator(function*(b){b=yield x(this.parsedUrl.path,{query:{f:"json",token:this.apiKey},responseType:"json",signal:b});b.ssl&&(this.url=
this.url.replace(/^http:/i,"https:"));b=b.data;this.read(b,{origin:"service",url:this.parsedUrl});this.validateLayer(b)});return function(b){return a.apply(this,arguments)}}();h._ensureLoadBeforeSave=function(){var a=l._asyncToGenerator(function*(){yield this.load();"beforeSave"in this&&"function"===typeof this.beforeSave&&(yield this.beforeSave())});return function(){return a.apply(this,arguments)}}();h.validateLayer=function(a){};h._updateTypeKeywords=function(a,b,c){a.typeKeywords||(a.typeKeywords=
[]);b=b.getTypeKeywords();for(const d of b)a.typeKeywords.push(d);a.typeKeywords&&(a.typeKeywords=a.typeKeywords.filter((d,e,n)=>n.indexOf(d)===e),1===c&&(a.typeKeywords=a.typeKeywords.filter(d=>"Hosted Service"!==d)))};h._saveAs=function(){var a=l._asyncToGenerator(function*(b,c){c={...D,...c};b=N.from(b);b||(p.error("_saveAs(): requires a portal item parameter"),yield Promise.reject(new m("sceneservice:portal-item-required","_saveAs() requires a portal item to save to")));b.id&&(b=b.clone(),b.id=
null);const d=b.portal||B.getDefault();yield this._ensureLoadBeforeSave();b.type="Scene Service";b.portal=d;const e={origin:"portal-item",url:null,messages:[],portal:d,portalItem:b,writtenProperties:[],blockedRelativeUrls:[],resources:{toAdd:[],toUpdate:[],toKeep:[],pendingOperations:[]}},n={layers:[this.write(null,e)]};yield Promise.all(e.resources.pendingOperations);yield this._validateAgainstJSONSchema(n,e,c);b.url=this.url;b.title||(b.title=this.title);this._updateTypeKeywords(b,c,1);yield d._signIn();
yield d.user.addItem({item:b,folder:c&&c.folder,data:n});yield C.saveResources(this.resourceReferences,e,null);this.portalItem=b;z.updateOrigins(e);return e.portalItem=b});return function(b,c){return a.apply(this,arguments)}}();h._save=function(){var a=l._asyncToGenerator(function*(b){b={...D,...b};this.portalItem||(p.error("_save(): requires the .portalItem property to be set"),yield Promise.reject(new m("sceneservice:portal-item-not-set","Portal item to save to has not been set on this SceneService")));
"Scene Service"!==this.portalItem.type&&(p.error("_save(): Non-matching portal item type. Got "+this.portalItem.type+", expected Scene Service"),yield Promise.reject(new m("sceneservice:portal-item-wrong-type",'Portal item needs to have type "Scene Service"')));yield this._ensureLoadBeforeSave();const c={origin:"portal-item",url:this.portalItem.itemUrl&&y.urlToObject(this.portalItem.itemUrl),messages:[],portal:this.portalItem.portal||B.getDefault(),portalItem:this.portalItem,writtenProperties:[],
blockedRelativeUrls:[],resources:{toAdd:[],toUpdate:[],toKeep:[],pendingOperations:[]}},d={layers:[this.write(null,c)]};yield Promise.all(c.resources.pendingOperations);yield this._validateAgainstJSONSchema(d,c,b);this.portalItem.url=this.url;this.portalItem.title||(this.portalItem.title=this.title);this._updateTypeKeywords(this.portalItem,b,0);yield this.portalItem.update({data:d});yield C.saveResources(this.resourceReferences,c,null);z.updateOrigins(c);return this.portalItem});return function(b){return a.apply(this,
arguments)}}();h._validateAgainstJSONSchema=function(){var a=l._asyncToGenerator(function*(b,c,d){c=c.messages.filter(e=>"error"===e.type).map(e=>new m(e.name,e.message,e.details));d&&d.validationOptions.ignoreUnsupported&&(c=c.filter(e=>"layer:unsupported"!==e.name&&"symbol:unsupported"!==e.name&&"symbol-layer:unsupported"!==e.name&&"property:unsupported"!==e.name&&"url:unsupported"!==e.name&&"scenemodification:unsupported"!==e.name));if(d.validationOptions.enabled&&(b=(yield new Promise(function(e,
n){F(["../support/schemaValidator"],e,n)})).validate(b,d.portalItemLayerType),0<b.length)){const e=`Layer item did not validate:\n${b.join("\n")}`;p.error(`_validateAgainstJSONSchema(): ${e}`);if("throw"===d.validationOptions.failPolicy)throw d=b.map(n=>new m("sceneservice:schema-validation",n)).concat(c),new m("sceneservice-validate:error","Failed to save layer item due to schema validation, see `details.errors`.",{combined:d});}if(0<c.length)throw new m("sceneservice:save","Failed to save SceneService due to unsupported or invalid content. See 'details.errors' for more detailed information",
{errors:c});});return function(b,c,d){return a.apply(this,arguments)}}();l._createClass(t,[{key:"url",set:function(a){a=r.sanitizeUrlWithLayerId({layer:this,url:a,nonStandardUrlAllowed:!1,logger:p});this._set("url",a.url);null!=a.layerId&&this._set("layerId",a.layerId)}},{key:"parsedUrl",get:function(){var a=this._get("url");if(!a)return null;a=y.urlToObject(a);null!=this.layerId&&(a.path=`${a.path}/layers/${this.layerId}`);return a}}]);return t}(f);g.__decorate([k.property(A.id)],f.prototype,"id",
void 0);g.__decorate([k.property({type:w})],f.prototype,"spatialReference",void 0);g.__decorate([q.reader("spatialReference",["spatialReference","store.indexCRS","store.geographicCRS"])],f.prototype,"readSpatialReference",null);g.__decorate([k.property({type:v})],f.prototype,"fullExtent",void 0);g.__decorate([q.reader("fullExtent",["fullExtent","store.extent","spatialReference","store.indexCRS","store.geographicCRS"])],f.prototype,"readFullExtent",null);g.__decorate([k.property({readOnly:!0,type:L})],
f.prototype,"heightModelInfo",void 0);g.__decorate([k.property({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:{source:"minScale"},write:!1}}}})],f.prototype,"minScale",void 0);g.__decorate([k.property({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:{source:"maxScale"},write:!1}}}})],f.prototype,"maxScale",void 0);g.__decorate([k.property({readOnly:!0})],f.prototype,"version",void 0);g.__decorate([q.reader("version",["store.version"])],
f.prototype,"readVersion",null);g.__decorate([k.property({type:String,json:{read:{source:"copyrightText"}}})],f.prototype,"copyright",void 0);g.__decorate([k.property({type:String,json:{read:!1}})],f.prototype,"sublayerTitleMode",void 0);g.__decorate([k.property({type:String})],f.prototype,"title",void 0);g.__decorate([q.reader("portal-item","title")],f.prototype,"readTitlePortalItem",null);g.__decorate([q.reader("service","title",["name"])],f.prototype,"readTitleService",null);g.__decorate([k.property({type:Number,
json:{origins:{service:{read:{source:"id"}},"portal-item":{write:{target:"id",isRequired:!0,ignoreOrigin:!0},read:!1}}}})],f.prototype,"layerId",void 0);g.__decorate([k.property(A.url)],f.prototype,"url",null);g.__decorate([K.writer("url")],f.prototype,"writeUrl",null);g.__decorate([k.property()],f.prototype,"parsedUrl",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"store",void 0);g.__decorate([k.property({type:String,readOnly:!0,json:{read:{source:"store.rootNode"}}})],f.prototype,"rootNode",
void 0);return f=g.__decorate([J.subclass("esri.layers.mixins.SceneService")],f)};Object.defineProperty(u,"__esModule",{value:!0})});