// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../geometry ../../../../../core/Handles ../../../../../core/maybe ../../../../../core/accessorSupport/decorators/property ../../../../../core/has ../../../../../core/accessorSupport/ensureType ../../../../../core/Logger ../../../../../core/jsonMap ../../../../../core/accessorSupport/decorators/subclass ../../../../../layers/graphics/hydratedFeatures ../../editingTools/dragEventPipeline3D ./DirectLineMeasurement3DModel ./DirectLineMeasurement3DView ./PickRequest ./PickResult ../../../../interactive/dragEventPipeline ../../../../interactive/InteractiveToolBase ../../../../support/screenUtils ../../../../../geometry/Point".split(" "),
function(q,e,d,y,z,g,K,L,M,N,A,B,r,C,D,E,F,t,G,u,H){d=function(v){function m(a){var b=v.call(this,a)||this;b._handles=new y;b._cachedPickRequest=new E.PickRequest;b._cachedPickResult=new F.PickResult;b._isAnyPointerDown=!1;b.startManipulator=null;b.endManipulator=null;b.model=new C.DirectLineMeasurement3DModel({sceneView:a.view});b.measurementView=new D.DirectLineMeasurement3DView({model:b.model});return b}q._inheritsLoose(m,v);var c=m.prototype;c.initialize=function(){this.measurementView.when().then(()=>
this._initialize())};c._initialize=function(){const {start:a,end:b}=this.measurementView.createManipulators();var h=(f,k,w)=>t.createManipulatorDragEventPipeline(f,(n,I,J)=>{const x=r.hideManipulatorWhileDragging(n);I.next(x).next(r.screenToMap3D(this.view)).next(l=>"start"!==l.action?l:null).next(l=>{const p=B.clonePoint(l.mapEnd,new H);this.model[k]=p;n.location=p;this.model[w]=this._surfaceLocation(p,l.surfaceType)});J.next(x).next(t.resetProperties(this.model,[k,w])).next(()=>{n.location=z.unwrap(this.model[k])})});
this._handles.add([h(a,"startPoint","startPointSurfaceLocation"),h(b,"endPoint","endPointSurfaceLocation")]);[a,b].forEach(f=>{this._handles.add([f.events.on("grab-changed",()=>{const k=a.grabbing||b.grabbing;k&&"measured"===this.model.state&&(this.model.state="editing");k||(this.model.finishMeasurement(),"editing"===this.model.state&&(this.model.state="measured"))})])});this.manipulators.add(a);this.manipulators.add(b);this.startManipulator=a;this.endManipulator=b;h=this.watch("state",f=>{switch(f){case "measured":this.complete();
break;default:this.finishToolCreation()}});this._handles.add(h);"measured"===this.state?this.complete():this.startToolCreation()};c.destroy=function(){this.measurementView.destroy();this._set("measurementView",null);this.model.destroy();this._set("model",null);this._handles.destroy();this._handles=null};c.activate=function(){this.model.active=!0};c.deactivate=function(){switch(this.toolState){case "created":case "creating":case "pending":this.model.active=!1}};c.onDetach=function(){this.model.reset()};
c.onShow=function(){this.measurementView.show();this.created&&this._updateManipulatorVisibility()};c.onHide=function(){this.created&&this.measurementView.hide()};c.onInputEvent=function(a){switch(a.type){case "immediate-click":this._handleImmediateClick(a);break;case "pointer-move":this._handlePointerMove(a);break;case "pointer-down":this._handlePointerDown();break;case "pointer-up":this._handlePointerUp()}this._updateManipulatorVisibility()};c._handlePointerMove=function(a){this._clearCachedPickRequest();
const b=u.createScreenPointFromEvent(a);"mouse"===a.pointerType&&(this._hoverAt(b),"drawing"===this.model.state&&(this.endManipulator.events.emit("drag",{action:"update",start:b,screenPoint:b}),a.stopPropagation()))};c._handlePointerDown=function(){this._isAnyPointerDown=!0};c._handlePointerUp=function(){this._isAnyPointerDown=!1};c._handleImmediateClick=function(a){this._clearCachedPickRequest();if("mouse"!==a.pointerType||0===a.button){var b=u.createScreenPointFromEvent(a),h=a.pointerType,f=!1;
if(this.model.active)switch(this.model.state){case "initial":this.startManipulator.events.emit("drag",{action:"start",pointerType:h,start:b,screenPoint:b});this.startManipulator.events.emit("drag",{action:"end",start:b,screenPoint:b});this.model.startPoint&&(this.startManipulator.interactive=!1,this.endManipulator.interactive=!1,this.model.state="drawing",this.endManipulator.events.emit("drag",{action:"start",pointerType:h,start:b,screenPoint:b}),f=!0);break;case "drawing":this.endManipulator.events.emit("drag",
{action:"update",start:b,screenPoint:b}),null!=this.model.endPoint&&(this.endManipulator.events.emit("drag",{action:"end",start:b,screenPoint:b}),this.startManipulator.interactive=!0,this.endManipulator.interactive=!0,this.model.finishMeasurement(),f=!0)}f&&a.stopPropagation();"mouse"===a.pointerType&&this._hoverAt(b)}};c._hoverAt=function(a){const b=this._isAnyPointerDown&&"drawing"!==this.model.state&&"editing"!==this.model.state;this.measurementView.requiresCursorPoint&&!b?(a=this._pick(a),a.mapPoint&&
(this.model.cursorPoint=a.mapPoint)):this.model.cursorPoint=null};c._pick=function(a){const b=this._cachedPickRequest.screenPoint;if(b&&b.x===a.x&&b.y===a.y)return this._cachedPickResult;this._cachedPickRequest.screenPoint=a;return this._cachedPickResult=this.measurementView.pick(this._cachedPickRequest)};c._clearCachedPickRequest=function(){this._cachedPickRequest.screenPoint=null};c._surfaceLocation=function(a,b){return 0===b?"on-the-surface":a.z>=this.measurementView.getElevation(a)?"above-the-surface":
"below-the-surface"};c._updateManipulatorVisibility=function(){this.startManipulator.available=null!=this.model.startPoint;this.endManipulator.available=null!=this.model.endPoint};q._createClass(m,[{key:"state",get:function(){var a;return null!=(a=this.model)&&a.isMeasuring?"measured"===this.model.state?"measured":"measuring":"ready"}},{key:"creating",get:function(){return"initial"===this.model.state||"drawing"===this.model.state}},{key:"isSupported",get:function(){return"3d"===this.get("view.type")}},
{key:"cursor",get:function(){var a;return null==(a=this.model)||!a.active||"drawing"!==this.model.state&&"initial"!==this.model.state?null:"crosshair"}},{key:"unit",get:function(){return this.measurementView.unit},set:function(a){this.measurementView.unit=a}},{key:"validMeasurement",get:function(){return this.model.validMeasurement}}]);return m}(G.InteractiveToolBase);e.__decorate([g.property({readOnly:!0})],d.prototype,"state",null);e.__decorate([g.property({readOnly:!0})],d.prototype,"creating",
null);e.__decorate([g.property({readOnly:!0})],d.prototype,"isSupported",null);e.__decorate([g.property({readOnly:!0})],d.prototype,"cursor",null);e.__decorate([g.property({constructOnly:!0})],d.prototype,"model",void 0);e.__decorate([g.property({constructOnly:!0})],d.prototype,"measurementView",void 0);e.__decorate([g.property()],d.prototype,"unit",null);e.__decorate([g.property({readOnly:!0})],d.prototype,"validMeasurement",null);return d=e.__decorate([A.subclass("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")],
d)});