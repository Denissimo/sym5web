// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Handles ../../../core/watchUtils ../../../chunks/mat4 ../../../chunks/mat4f64 ../../../chunks/vec2 ../../../chunks/vec2f64 ../../../chunks/vec3 ../../../chunks/vec3f64 ../../../chunks/vec4 ../../../chunks/vec4f64 ../../../geometry/support/Ellipsoid ./atmosphereUtils ./RealisticAtmosphereTechnique ../support/buffer/glUtil ../support/buffer/InterleavedLayout ../webgl-engine/lib/DefaultVertexAttributeLocations ../../webgl/BufferObject ../../webgl/VertexArrayObject".split(" "),
function(t,F,u,v,w,x,n,g,h,y,l,m,z,p,G,H,I,J,K){let L=function(){function q(a){this._view=a;this.canRender=!0;this._skyslot=14;this._hazeSlot=15;this._renderData={texDepth:n.create(),cameraPosition:h.create(),projectionInverse:w.create(),viewInverse:w.create(),heightParameters:l.create(),atmosphereParameters1:l.create(),atmosphereParameters2:l.create(),atmosphereParameters3:h.create(),invWavelength:A,invWavelengthScaled:k,radii:n.create(),scale:0,scaleDepth:.25,lowerAlphaBlendBound:0,scaleOverScaleDepth:0,
oneOverScaleDepth:0,scaleDepthBlue:.05,oneOverScaleDepthBlue:20,scaleOverScaleDepthBlue:0,g:-.99999,g2:-.99999*-.99999,miePhaseCoefficients:B,nearFar:n.create(),cameraHeight:0,cameraHeightSq:0,C:0,CSur:0,innerFadeDistance:0,altitudeFade:0};this._lowerElevationBoundRadius=0;this._lowerBoundEarthRadius=m.earth.radius;this._updateRadius(m.earth.radius)}var d=q.prototype;d.destroy=function(){this._handles&&(this._handles.destroy(),this._handles=null);this._vao&&(this._vao.dispose(),this._vao=null)};d.when=
function(){return Promise.resolve()};d.initializeRenderContext=function(a){const b=a.renderContext.rctx;this._handles=new F;this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"});this._handles.add(u.on(this._view,"basemapTerrain","elevation-change",f=>this._updateElevation(f),()=>this._updateElevation()));this._handles.add(u.on(this._view,"basemapTerrain",
"elevation-bounds-change",()=>this._updateVisibleElevationBounds(),()=>this._updateVisibleElevationBounds()));const c=new p.RealisticAtmosphereTechniqueConfiguration;c.haze=!1;this._atmosphereTechnique=a.shaderTechniqueRep.acquire(p.RealisticAtmosphereTechnique,c);c.haze=!0;this._atmosphereHazeTechnique=a.shaderTechniqueRep.acquire(p.RealisticAtmosphereTechnique,c);this._vao=this._createVertexArrayObject(b)};d.uninitializeRenderContext=function(){this.destroy()};d.render=function(a){if(a.slot!==this._hazeSlot&&
a.slot!==this._skyslot||0!==a.pass)return!1;this._update(a.camera);a.slot===this._skyslot&&this._renderSky(a);a.slot===this._hazeSlot&&this._renderHaze(a);return!0};d._renderSky=function(a){const b=a.rctx,c=this._atmosphereTechnique.program;b.useProgram(c);this._atmosphereTechnique.bindPipelineState(b);c.setUniform3fv("atmosphereParameters3",this._renderData.atmosphereParameters3);this._renderCommon(c,a)};d._renderHaze=function(a){const b=a.rctx,c=a.offscreenRenderingHelper,f=this._atmosphereHazeTechnique.program;
b.useProgram(f);this._atmosphereHazeTechnique.bindPipelineState(b);c.renderDepthDetached(()=>{f.bindTexture(c.depthTexture,"depthTex");this._renderCommon(f,a)})};d._renderCommon=function(a,b){const c=b.rctx;a.setUniform3fv("invWavelength",this._renderData.invWavelength);a.setUniform3fv("invWavelengthScaled",this._renderData.invWavelengthScaled);b.scenelightingData.setLightDirectionUniform(a);a.setUniform4fv("heightParameters",this._renderData.heightParameters);a.setUniform3fv("cameraPosition",this._renderData.cameraPosition);
a.setUniformMatrix4fv("projectionInverse",this._renderData.projectionInverse);a.setUniformMatrix4fv("viewInverse",this._renderData.viewInverse);a.setUniform2fv("nearFar",this._renderData.nearFar);a.setUniform2fv("radii",this._renderData.radii);a.setUniform4fv("atmosphereParameters1",this._renderData.atmosphereParameters1);a.setUniform4fv("atmosphereParameters2",this._renderData.atmosphereParameters2);a.setUniform1f("innerFadeDistance",this._renderData.innerFadeDistance);a.setUniform1f("altitudeFade",
this._renderData.altitudeFade);c.bindVAO(this._vao);a.assertCompatibleVertexAttributeLocations(this._vao);c.drawArrays(5,0,4)};d._createVertexArrayObject=function(a){const b=C.createBuffer(4);b.position.setVec(0,[-1,-1]);b.position.setVec(1,[1,-1]);b.position.setVec(2,[-1,1]);b.position.setVec(3,[1,1]);b.uv0.setVec(0,[0,0]);b.uv0.setVec(1,[1,0]);b.uv0.setVec(2,[0,1]);b.uv0.setVec(3,[1,1]);return new K(a,I.Default3D,{geometry:G.glLayout(C)},{geometry:J.createVertex(a,35044,b.buffer)})};d._adjustRadiusForTesselation=
function(a){return a*Math.cos(Math.PI/16/16)};d._updateElevation=function(a){a=a?a.tile:this._view.basemapTerrain.rootTiles[0];0===a.lij[0]&&(a=this._adjustRadiusForTesselation(m.earth.radius+a.elevationBounds[0]),a!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=a,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds()))};d._updateVisibleElevationBounds=function(){const a=this._adjustRadiusForTesselation(m.earth.radius+this._view.basemapTerrain.elevationBounds.min);
(0>this._lowerBoundEarthRadius||a<this._lowerBoundEarthRadius)&&this._updateRadius(a)};d._updateRadius=function(a){this._lowerBoundEarthRadius=a;var b=a/10*10.25;const c=1/(b-a),f=c/.25,D=c/.05,E=.3*(b-a)+a,e=this._renderData;y.set(e.atmosphereParameters1,c,.25,f,4);y.set(e.atmosphereParameters2,-.99999,.05,D,20);g.set(e.atmosphereParameters3,-.99999*-.99999,B,E);x.set(e.radii,a,b);e.scale=c;e.lowerAlphaBlendBound=E;e.scaleOverScaleDepth=f;e.scaleOverScaleDepthBlue=D;b=z.INNER_ATMOSPHERE_DEPTH;e.innerFadeDistance=
2*Math.sqrt((2*a-b)*b)};d._update=function(a){a&&(this._renderData.cameraHeight=g.length(a.eye),this._renderData.cameraHeightSq=this._renderData.cameraHeight*this._renderData.cameraHeight,this._renderData.C=this._renderData.cameraHeightSq-this._renderData.radii[1]*this._renderData.radii[1],this._renderData.CSur=this._renderData.cameraHeightSq-this._renderData.radii[0]*this._renderData.radii[0],this._renderData.heightParameters=l.fromValues(this._renderData.cameraHeight,this._renderData.cameraHeightSq,
this._renderData.C,this._renderData.CSur),g.copy(this._renderData.cameraPosition,a.eye),v.invert(this._renderData.projectionInverse,a.projectionMatrix),v.invert(this._renderData.viewInverse,a.viewMatrix),x.set(this._renderData.nearFar,a.near,a.far),this._renderData.altitudeFade=z.computeInnerAltitudeFade(this._renderData.cameraHeight-this._lowerBoundEarthRadius))};q.isSupported=function(a){return a.renderContext.rctx.capabilities.depthTexture};return q}();const M=.02*Math.PI,r=.004*Math.PI,A=h.fromValues(1/
.65**4,1/.57**4,1/.475**4),k=h.clone(A);g.scale(k,k,M);g.add(k,k,h.fromValues(r,r,r));const B=(1- -.99999*-.99999)/(2+-.99999*-.99999)*1.5,C=H.newLayout().vec2f("position").vec2f("uv0");t.RealisticAtmosphere=L;Object.defineProperty(t,"__esModule",{value:!0})});