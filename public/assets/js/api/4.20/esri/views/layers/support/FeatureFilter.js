// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../chunks/tslib.es6 ../../../geometry ../../../TimeExtent ../../../core/jsonMap ../../../core/JSONSupport ../../../core/lang ../../../core/accessorSupport/decorators/property ../../../core/accessorSupport/ensureType ../../../core/has ../../../core/Logger ../../../core/accessorSupport/decorators/subclass ../../../core/accessorSupport/decorators/writer ../../../geometry/support/jsonUtils ../../../rest/support/Query".split(" "),function(x,c,y,z,
h,b,f,e,m,F,G,A,B,C,D){var n;m=new h.JSONMap({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelDisjoint:"disjoint",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"});h=new h.JSONMap({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",
esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"});b=n=function(d){function k(a){a=d.call(this,a)||this;a.where=null;a.geometry=null;a.spatialRelationship="intersects";a.hiddenIds=new Set;a.distance=void 0;a.objectIds=null;a.units=null;a.timeExtent=null;a.enabled=!1;return a}x._inheritsLoose(k,d);var g=k.prototype;g.writeWhere=function(a,l){l.where=a||"1\x3d1"};g.enable=function(){this._set("enabled",!0)};g.createQuery=function(a=
{}){const {where:l,geometry:p,spatialRelationship:q,timeExtent:r,objectIds:t,units:u,distance:v}=this;return new D({geometry:f.clone(p),objectIds:f.clone(t),spatialRelationship:q,timeExtent:f.clone(r),where:l,units:u,distance:v,...a})};g.clone=function(){const {where:a,geometry:l,spatialRelationship:p,hiddenIds:q,timeExtent:r,objectIds:t,units:u,distance:v}=this,w=new Set;q.forEach(E=>w.add(E));return new n({geometry:f.clone(l),hiddenIds:w,objectIds:f.clone(t),spatialRelationship:p,timeExtent:f.clone(r),
where:a,units:u,distance:v})};return k}(b.JSONSupport);c.__decorate([e.property({type:String})],b.prototype,"where",void 0);c.__decorate([B.writer("where")],b.prototype,"writeWhere",null);c.__decorate([e.property({types:y.geometryTypes,json:{read:C.fromJSON,write:!0}})],b.prototype,"geometry",void 0);c.__decorate([e.property({type:String,json:{read:{source:"spatialRel",reader:m.read},write:{target:"spatialRel",writer:m.write}}})],b.prototype,"spatialRelationship",void 0);c.__decorate([e.property({json:{write:(d,
k,g)=>k[g]=Array.from(d),read:d=>new Set(d)}})],b.prototype,"hiddenIds",void 0);c.__decorate([e.property({type:Number,json:{write:{overridePolicy(d){return{enabled:0<d}}}}})],b.prototype,"distance",void 0);c.__decorate([e.property({type:[Number],json:{write:!0}})],b.prototype,"objectIds",void 0);c.__decorate([e.property({type:String,json:{read:h.read,write:{writer:h.write,overridePolicy(d){return{enabled:d&&0<this.distance}}}}})],b.prototype,"units",void 0);c.__decorate([e.property({type:z,json:{write:!0}})],
b.prototype,"timeExtent",void 0);c.__decorate([e.property({readOnly:!0})],b.prototype,"enabled",void 0);return b=n=c.__decorate([A.subclass("esri.views.layers.support.FeatureFilter")],b)});