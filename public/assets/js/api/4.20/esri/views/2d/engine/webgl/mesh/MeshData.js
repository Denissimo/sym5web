// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../tiling/PagedTileQueue ../../../tiling/TileInfoView ../../../tiling/TileKey ../../../tiling/TileQueue ../../../tiling/TileStrategy ../definitions ../enums ../Utils ./VertexDataWriter ../../../layers/features/support/AttributeStore ../../../layers/features/support/tileUtils".split(" "),function(q,x,r,B,y,C,D,p,g,t,u,z,A){function v(l){switch(l){case 1:case 8:case 32:return-1;case 2:case 64:return 0;case 4:case 16:case 128:return 1}}
function w(l){switch(l){case 1:case 2:case 4:return-1;case 8:case 16:return 0;case 32:case 64:case 128:return 1}}r=function(){function l(a,b,c,d,e){this.hasRecords=this._hasAggregate=this._hasDotDensity=!1;this._data={self:new Map,neighbors:[]};this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0};this.hint=b;this.tileKey=a;this._hasDotDensity=c;this._hasAggregate=d;this._pixelBufferEnabled=
e}var f=l.prototype;f.serialize=function(a){const b=[];b.push(this._serializeTileVertexData(this.tileKey,this._data.self));this._data.neighbors.forEach((c,d)=>{var e=1<<d;d=v(e);e=w(e);d=A.getPow2NeighborKey(new y(this.tileKey),d,e,a);b.push(this._serializeTileVertexData(d.id,c))});return b};f._serializeTileVertexData=function(a,b){var c,d,e,m,n;const k=[];b={[g.WGLGeometryType.MARKER]:null==(c=b.get(g.WGLGeometryType.MARKER))?void 0:c.serialize(k),[g.WGLGeometryType.FILL]:null==(d=b.get(g.WGLGeometryType.FILL))?
void 0:d.serialize(k),[g.WGLGeometryType.LINE]:null==(e=b.get(g.WGLGeometryType.LINE))?void 0:e.serialize(k),[g.WGLGeometryType.TEXT]:null==(m=b.get(g.WGLGeometryType.TEXT))?void 0:m.serialize(k),[g.WGLGeometryType.LABEL]:null==(n=b.get(g.WGLGeometryType.LABEL))?void 0:n.serialize(k)};return{message:{tileKey:a,data:b},transferList:k}};f.featureStart=function(a=0){this._current.insertAfter=a};f.featureEnd=function(){};f.recordStart=function(a,b,c,d,e){this._current.writer=this._getVertexWriter(c,d);
this._current.overlaps=0;this._current.indexStart=this._current.writer.indexCount;this._current.vertStart=this._current.writer.vertexCount;this._current.bufferingEnabled=e;this._current.id=a;this._current.materialKey=b;this._current.geometryType=c;this._current.isDotDensity=!1;this._current.writer.recordStart()};f.recordCount=function(){return this._current.writer.recordCount};f.vertexCount=function(){return this._current.writer.vertexCount};f.indexCount=function(){return this._current.writer.indexCount};
f.vertexBounds=function(a,b,c,d){this._current.bufferingEnabled&&this._addOverlap(a,b,c,d)};f.vertexWrite=function(a){this._current.writer.writeVertex(a)};f.vertexWriteF32=function(a){this._current.writer.writeVertexF32(a)};f.vertexEnd=function(){};f.vertexWriter=function(){return this._current.writer.vertexWriter};f.indexWrite=function(a){this._current.writer.writeIndex(a)};f.indexWriter=function(){return this._current.writer.indexWriter};f.metricWriter=function(){return this._current.writer.metricWriter};
f.metricStart=function(a,b,c,d,e,m,n,k){this._current.writer=this._getVertexWriter(g.WGLGeometryType.LABEL,!1);const h=this._current.writer.metricWriter;h.push(z.getDisplayIdTexel(a));h.push(b);h.push(c);h.push(d);h.push(e);h.push(m);h.push(n);h.push(k);h.push(255);this._current.metricBoxLenPointer=h.push(0)};f.metricEnd=function(){const a=this._current.writer.metricWriter;0===a.getValue(this._current.metricBoxLenPointer)&&a.seek(a.length-10)};f.metricBoxWrite=function(a,b,c,d){const e=this._current.writer.metricWriter;
e.incr(this._current.metricBoxLenPointer);e.push(0);e.push(0);e.push(a);e.push(b);e.push(c);e.push(d)};f.recordEnd=function(){var a=this._current.indexStart,b=this._current.writer.indexCount;if(a===b)return!1;this.hasRecords=!0;var c=this._current.vertStart;this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,a,b-a,c,this._current.writer.vertexCount-c);if(!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===
g.WGLGeometryType.LABEL)return!0;a=this._current.writer;for(b=0;8>b;b++)if(c=1<<b,this._current.overlaps&c){if(!this._data.neighbors[b]){var d=new Map;this._data.neighbors[b]=d}d=this._data.neighbors[b];var e=this._current.geometryType;if(!d.has(e)){const m=t.getStrides(e,this._current.isDotDensity).geometry;d.set(e,new u.VertexDataWriter(e,m,p.PATCH_PIXEL_BUFFER_ALLOC_SIZE))}d=d.get(this._current.geometryType);e=4096*-v(c);c=4096*-w(c);d.copyLastFrom(a,e,c)}return!0};f._addOverlap=function(a,b,c,
d){this._current.overlaps|=255^((a<0+c?148:a>=p.TILE_SIZE-c?41:189)|(b<0+d?224:b>=p.TILE_SIZE-d?7:231))};f._getVertexWriter=function(a,b){if(!this._data.self.has(a)){b=this._data.self;const c=t.getStrides(a,this._hasDotDensity).geometry;b.set(a,new u.VertexDataWriter(a,c,8E3))}return this._data.self.get(a)};x._createClass(l,[{key:"hasAggregates",get:function(){return this._hasAggregate}},{key:"hasPixelBufferEnabled",get:function(){return this._pixelBufferEnabled}}]);return l}();q.MeshData=r;Object.defineProperty(q,
"__esModule",{value:!0})});