// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../request ../../../../core/has ../../../../core/ItemCache ../../../../core/promiseUtils ../../../../core/workers/workers ./GlyphMosaic ./GlyphSource ./SpriteMosaic ./TileIndex ./decluttering/debugging ../../tiling/TileKey".split(" "),function(r,k,t,u,p,m,B,v,w,x,y,C,z){const A=new p(10),n=new Map;p=function(){function q(c,a,d){this._vectorTileLayer=c;this._styleRepository=a;this.devicePixelRatio=d;this._connection=this._glyphMosaic=
this._spriteMosaic=null}var g=q.prototype;g.destroy=function(){this._connection&&(this._connection.close(),this._connection=null);this._vectorTileLayer=this._styleRepository=null;this._spriteMosaic&&(this._spriteMosaic=null);this._glyphMosaic&&(this._glyphMosaic=null)};g.start=function(){var c=k._asyncToGenerator(function*(a){const d=this._vectorTileLayer;var f=d.sourceNameToSource;const b=[];for(const e in f)b.push(this._fetchTileMap(f[e],a));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,
a);this._spriteSourcePromise.then(e=>{this._spriteMosaic=new x(1024,1024,250);this._spriteMosaic.setSpriteSource(e)});f=new w(this._styleRepository.glyphs);this._glyphMosaic=new v(1024,1024,f);this._broadcastPromise=B.open("WorkerTileHandler",{client:this,schedule:a.schedule,signal:a.signal}).then(e=>{this._connection=e;return Promise.all(this._connection.broadcast("setStyle",{style:d.currentStyleInfo.style,vectorTileLayerMaxBuffers:u("vectortilelayer-max-buffers")},a))});return Promise.all(b)});
return function(a){return c.apply(this,arguments)}}();g.updateStyle=function(){var c=k._asyncToGenerator(function*(a){yield this._broadcastPromise;return this._broadcastPromise=new Promise((d,f)=>{Promise.all(this._connection.broadcast("updateStyle",a)).then(d,f)})});return function(a){return c.apply(this,arguments)}}();g.setStyle=function(){var c=k._asyncToGenerator(function*(a,d){yield this._broadcastPromise;this._styleRepository=a;const f=this._vectorTileLayer.sourceNameToSource,b=[];for(const e in f)b.push(this._fetchTileMap(f[e],
null));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,null);this._spriteSourcePromise.then(e=>{this._spriteMosaic=new x(1024,1024,250);this._spriteMosaic.setSpriteSource(e)});a=new w(a.glyphs);this._glyphMosaic=new v(1024,1024,a);this._broadcastPromise=new Promise((e,l)=>{Promise.all(this._connection.broadcast("setStyle",{style:d,vectorTileLayerMaxBuffers:u("vectortilelayer-max-buffers")})).then(e,l)});b.push(this._broadcastPromise);return Promise.all(b)});
return function(a,d){return c.apply(this,arguments)}}();g.fetchTileData=function(c,a){return this._getRefKeys(c,a).then(d=>{const f=this._vectorTileLayer.sourceNameToSource,b=[];for(const e in f)b.push(e);return this._getSourcesData(b,d,a)})};g.parseTileData=function(c,a){const d=c&&c.data;if(!d)return Promise.resolve(null);const {sourceName2DataAndRefKey:f,transferList:b}=d;return 0===Object.keys(f).length?Promise.resolve(null):this._broadcastPromise.then(()=>this._connection.getAvailableClient().then(e=>
e.invoke("createTileAndParse",{key:c.key.id,sourceName2DataAndRefKey:f,styleLayerUIDs:c.styleLayerUIDs},{...a,transferList:b}).then(l=>({tileData:l}))))};g.getSprites=function(){var c=k._asyncToGenerator(function*(a){yield this._spriteSourcePromise;return this._spriteMosaic.getSpriteItems(a)});return function(a){return c.apply(this,arguments)}}();g.getGlyphs=function(c){return this._glyphMosaic.getGlyphItems(c.font,c.codePoints)};g.perfReport=function({key:c,milliseconds:a}){C.perfAdd(c,a,"ms")};
g._getTilePayload=function(){var c=k._asyncToGenerator(function*(a,d,f){a=z.pool.acquire(a.id);const b=this._vectorTileLayer.sourceNameToSource[d].getSourceTileUrl(a.level,a.row,a.col);z.pool.release(a);try{return{protobuff:yield this.request(b,f),sourceName:d}}catch(e){if(m.isAbortError(e))throw e;return{protobuff:null,sourceName:d}}});return function(a,d,f){return c.apply(this,arguments)}}();g.request=function(c,a){return t(c,{responseType:"array-buffer",...a}).then(({data:d})=>d)};g._fetchTileMap=
function(){var c=k._asyncToGenerator(function*(a,d){if(a.capabilities.operations.supportsTileMap&&a.tileIndex)return Promise.resolve();if(a.tileMapURL){var f=A.get(a.tileMapURL);if(f)a.tileIndex=f;else if(n.has(a.tileMapURL))try{var b=yield n.get(a.tileMapURL);a.tileIndex=new y(b.data)}catch(e){if(m.isAbortError(e))throw e;}else{d=t(a.tileMapURL,d);n.set(a.tileMapURL,d);try{b=yield d,n.delete(a.tileMapURL),A.put(a.tileMapURL,a.tileIndex),a.tileIndex=new y(b.data)}catch(e){if(n.delete(a.tileMapURL),
m.isAbortError(e))throw e;}}}});return function(a,d){return c.apply(this,arguments)}}();g._getRefKeys=function(c,a){const d=this._vectorTileLayer.sourceNameToSource,f=[];for(const b in d){const e=d[b].getRefKey(c,a);f.push(e)}return m.eachAlways(f)};g._getSourcesData=function(c,a,d){const f=[];for(let b=0;b<a.length;b++)if(null==a[b].value||null==c[b])f.push(null);else{const e=this._getTilePayload(a[b].value,c[b],d);f.push(e)}return m.eachAlways(f).then(b=>{const e={},l=[];for(let h=0;h<b.length;h++)b[h].value&&
b[h].value&&b[h].value.protobuff&&0<b[h].value.protobuff.byteLength&&(e[b[h].value.sourceName]={refKey:a[h].value.id,protobuff:b[h].value.protobuff},l.push(b[h].value.protobuff));return{sourceName2DataAndRefKey:e,transferList:l}})};k._createClass(q,[{key:"spriteMosaic",get:function(){return this._spriteSourcePromise.then(()=>this._spriteMosaic)}},{key:"glyphMosaic",get:function(){return this._glyphMosaic}}]);return q}();r.TileHandler=p;Object.defineProperty(r,"__esModule",{value:!0})});