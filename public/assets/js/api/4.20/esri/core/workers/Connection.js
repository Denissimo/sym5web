// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define(["../../chunks/_rollupPluginBabelHelpers","../handleUtils","../Logger","../promiseUtils","./RemoteClient"],function(p,q,r,m,n){const t=r.getLogger("esri.core.workers.Connection");return function(){function k(){this._clients=[];this._clientPromises=[];this._clientIdx=0}var g=k.prototype;g.destroy=function(){this.close()};g.open=function(a,b){return new Promise((c,d)=>{let e=!0;const h=f=>{m.throwIfAborted(b.signal);e&&(e=!1,f())};this._clients.length=a.length;this._clientPromises.length=a.length;
for(let f=0;f<a.length;++f){const l=a[f];m.isPromiseLike(l)?this._clientPromises[f]=l.then(u=>{this._clients[f]=new n(u,b);h(c);return this._clients[f]},()=>{h(d);return null}):(this._clients[f]=new n(l,b),this._clientPromises[f]=Promise.resolve(this._clients[f]),h(c))}})};g.broadcast=function(a,b,c){const d=Array(this._clientPromises.length);for(let e=0;e<this._clientPromises.length;++e)d[e]=this._clientPromises[e].then(h=>h.invoke(a,b,c));return d};g.close=function(){for(const a of this._clientPromises)a.then(b=>
b.close());this._clients.length=0;this._clientPromises.length=0};g.getAvailableClient=function(){let a;for(let b=0;b<this._clients.length;++b){const c=this._clients[b];if(!c)a=a||[],a.push(this._clientPromises[b]);else if(!c.isBusy())return Promise.resolve(c)}return a?Promise.race(a):(this._clientIdx=(this._clientIdx+1)%this._clients.length,Promise.resolve(this._clients[this._clientIdx]))};g.invoke=function(a,b,c){let d=null;Array.isArray(c)?(t.warn("invoke()","The transferList parameter is deprecated, use the options object instead"),
d={transferList:c}):d=c;return this.closed?Promise.reject(Error("Connection closed")):this.getAvailableClient().then(e=>e.invoke(a,b,d))};g.on=function(a,b){return Promise.all(this._clientPromises).then(()=>q.handlesGroup(this._clients.map(c=>c.on(a,b))))};g.openPorts=function(){return new Promise(a=>{const b=Array(this._clientPromises.length);let c=b.length;for(let d=0;d<this._clientPromises.length;++d)this._clientPromises[d].then(e=>{b[d]=e.openPort();0===--c&&a(b)})})};p._createClass(k,[{key:"closed",
get:function(){return!this._clients||!this._clients.length}},{key:"test",get:function(){return{numClients:this._clients.length}}}]);return k}()});