/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../geometry.js";import s from"../../Viewpoint.js";import{a as i}from"../../chunks/JSONSupport.js";import{property as e}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/ensureType.js";import"../../chunks/Logger.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{P as r}from"../../chunks/mathUtils.js";import{i as n,t as a,r as p,b as c}from"../../chunks/mat2d.js";import{c as m}from"../../chunks/mat2df32.js";import{c as h}from"../../chunks/mat2df64.js";import{s as l,b as u,c as j,r as f,m as d}from"../../chunks/mat3.js";import{c as w}from"../../chunks/mat3f32.js";import{c as y,t as k}from"../../chunks/vec2.js";import{f as v}from"../../chunks/vec2f32.js";import{a as g}from"../../chunks/vec2f64.js";import{c as R,i as _,j as x,k as z,l as M,m as S,n as U}from"../../chunks/viewpointUtils2.js";import b from"../../geometry/Extent.js";import N from"../../geometry/Point.js";import"../../geometry/Geometry.js";import"../../chunks/reader.js";import"../../chunks/object.js";import"../../geometry/SpatialReference.js";import"../../chunks/writer.js";import"../../chunks/string.js";import"../../core/Accessor.js";import"../../chunks/deprecate.js";import"../../chunks/metadata.js";import"../../chunks/handleUtils.js";import"../../chunks/ArrayPool.js";import"../../chunks/arrayUtils.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../chunks/Message.js";import"../../config.js";import"../../chunks/write.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/support/webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../../core/accessorSupport/decorators/cast.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../chunks/jsonMap.js";import"../../geometry/support/jsonUtils.js";import"../../Camera.js";import"../../chunks/mathUtils2.js";import"../../core/Collection.js";import"../../chunks/Evented.js";import"../../chunks/unitUtils.js";import"../../chunks/projectionEllipsoid.js";function T(t){return function(t){return t instanceof Float32Array&&t.length>=2}(t)||function(t){return Array.isArray(t)&&t.length>=2}(t)}var A;const E=[0,0];let P=A=class extends i{constructor(t){super(t),this._viewpoint2D={center:g(),rotation:0,scale:0,spatialReference:null},this.center=[0,0],this.extent=new b,this.id=0,this.inverseTransform=h(),this.resolution=0,this.rotation=0,this.scale=0,this.transform=h(),this.transformNoRotation=h(),this.displayMat3=w(),this.displayViewMat3=w(),this.viewMat3=w(),this.viewMat2d=m(),this.worldScreenWidth=0,this.size=[0,0]}set pixelRatio(t){this._set("pixelRatio",t),this._update()}set size(t){this._set("size",t),this._update()}set viewpoint(t){if(t){const s=this._viewpoint2D,i=t.targetGeometry;s.center[0]=i.x,s.center[1]=i.y,s.rotation=t.rotation,s.scale=t.scale,s.spatialReference=i.spatialReference}this._update()}copy(t){const s=this.size,i=this.viewpoint;return i&&s?(this.viewpoint=R(i,t.viewpoint),this._set("size",y(s,t.size))):(this.viewpoint=t.viewpoint.clone(),this._set("size",[t.size[0],t.size[1]])),this._set("pixelRatio",t.pixelRatio),this}clone(){return new A({size:this.size,viewpoint:this.viewpoint.clone(),pixelRatio:this.pixelRatio})}toMap(t,s,i){return T(s)?k(t,s,this.inverseTransform):(E[0]=s,E[1]=i,k(t,E,this.inverseTransform))}toScreen(t,s,i){return T(s)?k(t,s,this.transform):(E[0]=s,E[1]=i,k(t,E,this.transform))}toScreenNoRotation(t,s,i){return T(s)?k(t,s,this.transformNoRotation):(E[0]=s,E[1]=i,k(t,E,this.transformNoRotation))}getScreenTransform(t,s){const{center:i}=this._viewpoint2D,e=this._get("pixelRatio")||1,o=this._get("size");return _(t,i,o,s,0,e),t}_update(){const{center:t,spatialReference:i,scale:e,rotation:o}=this._viewpoint2D,m=this._get("pixelRatio")||1,h=this._get("size"),w=new s({targetGeometry:new N(t[0],t[1],i),scale:e,rotation:o});if(this._set("viewpoint",w),!h||!i||!e)return;this.resolution=x(w),this.rotation=o,this.scale=e,this.spatialReference=i,y(this.center,t);const k=0!==h[0]?2/h[0]:0,g=0!==h[1]?-2/h[1]:0;l(this.displayMat3,k,0,0,0,g,0,-1,1,1);const R=u(this.viewMat3),_=v(h[0]/2,h[1]/2),b=v(-h[0]/2,-h[1]/2),T=r(o);j(R,R,_),f(R,R,T),j(R,R,b),d(this.displayViewMat3,this.displayMat3,R);const A=n(this.viewMat2d);return a(A,A,_),p(A,A,T),a(A,A,b),z(this.extent,w,h),M(this.transform,w,h,m),c(this.inverseTransform,this.transform),S(this.transformNoRotation,w,h,m),this.worldScreenWidth=U(this.spatialReference,this.resolution),this._set("id",this.id+1),this}};t([e({readOnly:!0})],P.prototype,"id",void 0),t([e({value:1,json:{write:!0}})],P.prototype,"pixelRatio",null),t([e({json:{write:!0}})],P.prototype,"size",null),t([e({type:s,json:{write:!0}})],P.prototype,"viewpoint",null),P=A=t([o("esri.views.2d.ViewState")],P);var D=P;export default D;
