/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import{r as t}from"../chunks/arrayUtils.js";import{s as r}from"../chunks/jsonMap.js";import{a as s}from"../chunks/JSONSupport.js";import{u as i,g as o}from"../chunks/unitUtils.js";import{W as n,subclass as a}from"../core/accessorSupport/decorators/subclass.js";import{property as h}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"../chunks/ensureType.js";import"../chunks/Logger.js";import{r as l}from"../chunks/reader.js";import{w as c}from"../chunks/writer.js";import"../chunks/object.js";import"../core/Accessor.js";import"../chunks/deprecate.js";import"../chunks/metadata.js";import"../chunks/handleUtils.js";import"../chunks/ArrayPool.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../core/Error.js";import"../chunks/Message.js";import"../config.js";import"../chunks/string.js";import"../chunks/write.js";import"../chunks/projectionEllipsoid.js";import"./SpatialReference.js";import"../chunks/Ellipsoid.js";var p;const u=r()({orthometric:"gravity-related-height",gravity_related_height:"gravity-related-height",ellipsoidal:"ellipsoidal"}),d=u.jsonValues.slice();t(d,"orthometric");const g=r()({meter:"meters",foot:"feet","us-foot":"us-feet","clarke-foot":"clarke-feet","clarke-yard":"clarke-yards","clarke-link":"clarke-links","sears-yard":"sears-yards","sears-foot":"sears-feet","sears-chain":"sears-chains","benoit-1895-b-chain":"benoit-1895-b-chains","indian-yard":"indian-yards","indian-1937-yard":"indian-1937-yards","gold-coast-foot":"gold-coast-feet","sears-1922-truncated-chain":"sears-1922-truncated-chains","50-kilometers":"50-kilometers","150-kilometers":"150-kilometers"});let m=p=class extends s{constructor(e){super(e),this.heightModel="gravity-related-height",this.heightUnit="meters",this.vertCRS=null}writeHeightModel(e,t,r){return u.write(e,t,r)}readHeightModel(e,t,r){const s=u.read(e);return s||(r&&r.messages&&r.messages.push(function(e,t){return new n("height-model:unsupported",`Height model of value '${e}' is not supported`,t)}(e,{context:r})),null)}readHeightUnit(e,t,r){const s=g.read(e);return s||(r&&r.messages&&r.messages.push(j(e,{context:r})),null)}readHeightUnitService(e,t,r){const s=i(e)||g.read(e);return s||(r&&r.messages&&r.messages.push(j(e,{context:r})),null)}readVertCRS(e,t){return t.vertCRS||t.ellipsoid||t.geoid}clone(){return new p({heightModel:this.heightModel,heightUnit:this.heightUnit,vertCRS:this.vertCRS})}equals(e){return!!e&&(this===e||this.heightModel===e.heightModel&&this.heightUnit===e.heightUnit&&this.vertCRS===e.vertCRS)}static deriveUnitFromSR(e,t){const r=o(t);return new p({heightModel:e.heightModel,heightUnit:r,vertCRS:e.vertCRS})}write(e,t){return t={origin:"web-scene",...t},super.write(e,t)}static fromJSON(e){if(!e)return null;const t=new p;return t.read(e,{origin:"web-scene"}),t}};function j(e,t){return new n("height-unit:unsupported",`Height unit of value '${e}' is not supported`,t)}e([h({type:u.apiValues,constructOnly:!0,json:{origins:{"web-scene":{type:d,default:"ellipsoidal"}}}})],m.prototype,"heightModel",void 0),e([c("web-scene","heightModel")],m.prototype,"writeHeightModel",null),e([l(["web-scene","service"],"heightModel")],m.prototype,"readHeightModel",null),e([h({type:g.apiValues,constructOnly:!0,json:{origins:{"web-scene":{type:g.jsonValues,write:g.write}}}})],m.prototype,"heightUnit",void 0),e([l("web-scene","heightUnit")],m.prototype,"readHeightUnit",null),e([l("service","heightUnit")],m.prototype,"readHeightUnitService",null),e([h({type:String,constructOnly:!0,json:{origins:{"web-scene":{write:!0}}}})],m.prototype,"vertCRS",void 0),e([l("service","vertCRS",["vertCRS","ellipsoid","geoid"])],m.prototype,"readVertCRS",null),m=p=e([a("esri.geometry.HeightModelInfo")],m);var y=m;export default y;
