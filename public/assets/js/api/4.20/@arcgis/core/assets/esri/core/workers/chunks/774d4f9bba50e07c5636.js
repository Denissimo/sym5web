(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[9768],{89768:(e,t,s)=>{"use strict";s.r(t),s.d(t,{execute:()=>o});var a=s(60991),r=s(76506);let n;function o(e,t={}){let s=t.responseType;s?"array-buffer"!==s&&"blob"!==s&&"json"!==s&&"native"!==s&&"native-request-init"!==s&&"text"!==s&&(s="text"):s="json";const o=(0,r.u)(t.signal);return delete t.signal,r.g.invokeStaticMessage("request",{url:e,options:t},{signal:o}).then((async r=>{let i,l,u,c,b;if(r.data)if(r.data instanceof ArrayBuffer){if(!("json"!==s&&"text"!==s&&"blob"!==s||(i=new Blob([r.data]),"json"!==s&&"text"!==s||(n||(n=new FileReaderSync),c=n.readAsText(i),"json"!==s)))){try{l=JSON.parse(c||null)}catch(r){const s={...r,url:e,requestOptions:t};throw new a.Z("request:server",r.message,s)}if(l.error){const s={...l.error,url:e,requestOptions:t};throw new a.Z("request:server",l.error.message,s)}}}else"native"===s&&(r.data.signal=o,u=await fetch(r.data.url,r.data));switch(s){case"blob":b=i;break;case"json":b=l;break;case"native":b=u;break;case"text":b=c;break;default:b=r.data}return{data:b,requestOptions:t,ssl:r.ssl,url:e}}))}s(92143),s(31450),s(71552),s(40642),s(81172)}}]);