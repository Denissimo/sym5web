/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import r from"../core/Error.js";import{i as t}from"../core/lang.js";import{eachAlways as o}from"../core/promiseUtils.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./Logger.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import{c as i}from"./drapedUtils.js";const p=p=>{let l=class extends p{async fetchPopupFeatures(e,s){const{layer:a}=this;if(!e)return Promise.reject(new r("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a}));if("tile"!==a.type)return Promise.reject(new r("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:a.type}));const p=this.get("view.scale"),l=a.allSublayers.toArray().filter((e=>{const r=0===e.minScale||p<=e.minScale,t=0===e.maxScale||p>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&r&&t}));return o(l.map((async r=>{const o=r.createQuery(),a=t(s)?s.event:null,p=i({renderer:r.renderer,event:a});o.geometry=this.createFetchPopupFeaturesQueryGeometry(e,p),o.outFields=await r.popupTemplate.getRequiredFields();return(await r.queryFeatures(o)).features}))).then((e=>[].concat(...e.map((e=>e.value)).filter(Boolean))))}};return e([s()],l.prototype,"layer",void 0),l=e([a("esri.layers.mixins.TileLayerView")],l),l};export{p as T};
