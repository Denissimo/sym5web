/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../core/Error.js";import{open as r}from"../core/workers/workers.js";import o from"../layers/support/PixelBlock.js";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await r("RasterWorker");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async decode(r,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const t=await this._workerThread.invoke("decode",r,n);return t?new o(t):null}async symbolize(r,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const t={extent:r.extent&&r.extent.toJSON(),pixelBlock:r.pixelBlock.toJSON(),simpleStretchParams:r.simpleStretchParams,bandIds:r.bandIds},i=await this._workerThread.invoke("symbolize",t,n);return i?new o(i):null}async updateSymbolizer(r,o){var n;if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const t=null==r||null==(n=r.rendererJSON)?void 0:n.histograms;await Promise.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:r.toJSON(),histograms:t},o))}async stretch(r,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==r||!r.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},i=await this._workerThread.invoke("stretch",t,n);return i?new o(i):null}async split(r,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==r||!r.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},i=await this._workerThread.invoke("split",t,n);return i&&i.forEach(((e,r)=>{i.set(r,e?o.fromJSON(e):null)})),Promise.resolve(i)}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==r||!r.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON()},t=await this._workerThread.invoke("estimateStatisticsHistograms",n,o);return Promise.resolve(t)}async mosaicAndTransform(r,n){var t;if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==r||null==(t=r.srcPixelBlocks)||!t.length)return null;const i={...r,srcPixelBlocks:r.srcPixelBlocks.map((e=>e?e.toJSON():null))},a=await this._workerThread.invoke("mosaicAndTransform",i,n);return a?new o(a):null}}export{n as R};
