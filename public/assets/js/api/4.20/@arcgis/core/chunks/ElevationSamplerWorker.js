/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{i as t,h as r}from"../core/lang.js";import{P as e}from"./PooledRBush.js";import{b as o}from"./georeference.js";import"./arrayUtils.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../core/Error.js";import"./Logger.js";import"../config.js";import"./object.js";import"./string.js";import"./Message.js";import"./quickselect.js";import"./unitUtils.js";import"./jsonMap.js";import"./projectionEllipsoid.js";import"../geometry/SpatialReference.js";import"./tslib.es6.js";import"./JSONSupport.js";import"../core/Accessor.js";import"./deprecate.js";import"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./metadata.js";import"./handleUtils.js";import"./ArrayPool.js";import"../core/accessorSupport/decorators/subclass.js";import"./write.js";import"./writer.js";import"./Ellipsoid.js";import"./quatf64.js";import"./mat4.js";import"./mathUtils.js";import"./mat4f64.js";import"./mat3.js";import"../geometry/projection.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"./reader.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"./pe.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./aaBoundingRect.js";import"./geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"./axisAngleDegrees.js";import"./quat.js";import"./vec4.js";import"./BufferView.js";import"./vec2.js";import"./vec3.js";import"./projection.js";class s{async createIndex(r,o){const s=new Array;if(!r.vertexAttributes||!r.vertexAttributes.position)return new e;const i=this.createMeshData(r),p=t(o)?await o.invoke("createIndexThread",i,{transferList:s}):this.createIndexThread(i).result;return this.createPooledRBush().fromJSON(p)}createIndexThread(t){const r=new Float64Array(t.position),e=this.createPooledRBush();return t.components?this.createIndexComponentsThread(e,r,t.components.map((t=>new Uint32Array(t)))):this.createIndexAllThread(e,r)}createIndexAllThread(t,r){const e=new Array(r.length/9);let o=0;for(let t=0;t<r.length;t+=9)e[o++]=i(r,t+0,t+3,t+6);return t.load(e),{result:t.toJSON()}}createIndexComponentsThread(t,r,e){let o=0;for(const t of e)o+=t.length/3;const s=new Array(o);let p=0;for(const t of e)for(let e=0;e<t.length;e+=3)s[p++]=i(r,3*t[e+0],3*t[e+1],3*t[e+2]);return t.load(s),{result:t.toJSON()}}createMeshData(t){const r=(t.transform?o({position:t.vertexAttributes.position,normal:null,tangent:null},t.transform,t.spatialReference).position:t.vertexAttributes.position).buffer;return!t.components||t.components.some((t=>!t.faces))?{position:r}:{position:r,components:t.components.map((t=>t.faces))}}createPooledRBush(){return new e(9,r("csp-restrictions")?t=>t:[".minX",".minY",".maxX",".maxY"])}}function i(t,r,e,o){return{minX:Math.min(t[r+0],t[e+0],t[o+0]),maxX:Math.max(t[r+0],t[e+0],t[o+0]),minY:Math.min(t[r+1],t[e+1],t[o+1]),maxY:Math.max(t[r+1],t[e+1],t[o+1]),p0:[t[r+0],t[r+1],t[r+2]],p1:[t[e+0],t[e+1],t[e+2]],p2:[t[o+0],t[o+1],t[o+2]]}}export default s;export{s as ElevationSamplerWorker};
