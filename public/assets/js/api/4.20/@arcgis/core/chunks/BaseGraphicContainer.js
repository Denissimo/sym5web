/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import{HandleOwnerMixin as s}from"../core/HandleOwner.js";import{i,b as r,h as o}from"../core/lang.js";import{throwIfAborted as n,isAbortError as a,createAbortController as l}from"../core/promiseUtils.js";import{a as d,c as h}from"./screenUtils.js";import{property as c}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./Logger.js";import{subclass as u}from"../core/accessorSupport/decorators/subclass.js";import f,{e as p,f as m}from"../geometry/Polygon.js";import y,{j as g,g as _}from"../geometry/SpatialReference.js";import{a as x,r as v,f as b,d as D,y as w,w as B,h as T}from"./aaBoundingRect.js";import{getJsonType as C,isPolygon as F,isPolyline as L,isMultipoint as R,isExtent as I,isPoint as S}from"../geometry/support/jsonUtils.js";import{n as M}from"./normalizeUtilsSync.js";import{c as j,p as z}from"./projectionSupport.js";import{W as G,D as A,c as O,a as U,b as V,e as P,M as k}from"./Matcher.js";import{e as K,a as E,b as q}from"./defaults.js";import{F as H}from"./definitions.js";import{a as Z,b as N,s as X,d as Y,C as Q,e as W,f as J,h as $}from"./Utils12.js";import{B as ee,V as te}from"./VertexArrayObject.js";import"./FramebufferObject.js";import"./Texture.js";import{W as se,F as ie}from"./FeatureContainer.js";import{W as re,a as oe}from"./enums.js";import{b as ne}from"./BidiText.js";import{i as ae,a as le,g as de,b as he,c as ce,d as ue,e as fe,f as pe,P as me,h as ye,j as ge,k as _e,T as xe}from"./schemaUtils.js";import{F as ve,r as be,C as De,T as we,A as Be}from"./TileStore.js";import{x as Te,y as Ce,h as Fe,q as Le,i as Re}from"./featureConversionUtils.js";import{F as Ie}from"./FeatureSetReader.js";import{b as Se}from"./unitUtils.js";import{p as Me}from"../geometry/Extent.js";import{g as je}from"./extentUtils.js";import{normalizeMapX as ze}from"../geometry/support/normalizeUtils.js";import{a as Ge}from"./normalizeUtilsCommon.js";import{e as Ae}from"./utils3.js";import{q as Oe,d as Ue}from"./quantizationUtils.js";import{a as Ve}from"./OptimizedFeature.js";import{G as Pe}from"./GraphicsView.js";import{g as ke}from"./capabilities2.js";function Ke(e,t,s){if(!e.allDirty)if(null!=e.from&&null!=e.count){const i=Math.min(e.from,t),r=Math.max(e.from+e.count,t+s)-i;e.from=i,e.count=r}else e.from=t,e.count=s}class Ee{constructor(){this._dirties=Z((()=>({indices:{from:null,count:null,allDirty:!1}})),(()=>({vertices:{from:null,count:null,allDirty:!1}})))}hasDirty(){for(const e of this._dirties)if(null!==e.data.indices.count||e.data.indices.allDirty)return!0;return!1}markAllClean(){for(const e of this._dirties){e.data.indices.from=null,e.data.indices.count=null,e.data.indices.allDirty=!1;for(const t in e.buffers)e.buffers[t].data.vertices.from=null,e.buffers[t].data.vertices.count=null,e.buffers[t].data.vertices.allDirty=!1}}markAllDirty(){for(const e of this._dirties){e.data.indices.allDirty=!0;for(const t in e.buffers)e.buffers[t].data.vertices.allDirty=!0}}forEach(e){for(let t=0;t<this._dirties.length;++t){const s=this._dirties[t],i={};for(const e in s.buffers){const t=s.buffers[e].data.vertices;(t.allDirty||null!=t.from&&null!=t.count&&t.count>0)&&(i[e]=t)}const r=s.data.indices;let o;o=r.allDirty||null!=r.from&&null!=r.count&&r.count>0?{indices:r,vertices:i}:{indices:null,vertices:i},(o.indices||Object.keys(o).length>0)&&e(o,t)}}markDirtyIndices(e,t,s){Ke(this._dirties[e].data.indices,t,s)}markDirtyVertices(e,t,s,i){Ke(this._dirties[e].buffers[t].data.vertices,s,i)}}class qe{constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}get largestRange(){return this._largestRange}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;null!==t;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,o=this._parent._freeHead;for(;s&&!i;){const n=null!==r?r.from+r.count:0,a=null!==o?o.from:this._parent._size;e>=n&&e+t<=a?(s=!1,i=!0):null!==o?(r=o,o=o.next):s=!1}return[r,o]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;null!==t;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class He{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new qe(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(null===t)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,0===t.count){const e=null!==t.prev?this._freeHead:t.next;He._removeRange(t),this._freeHead=e}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s,next:i};if(null!==s&&(s.next=r),null!==i&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,null!==i&&r.from+r.count===i.from){const e=r.from,t=r.count;He._fuse(r,i),He._removeRange(i),this._bookKeeper.rangeResized(r,e,t),this._bookKeeper.rangeResized(i,void 0,0)}if(null!==s&&s.from+s.count===r.from){const e=s.from,t=s.count;He._fuse(s,r),He._removeRange(r),this._bookKeeper.rangeResized(s,e,t),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=null!==r.prev?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;if(0===e)return 0;return 1-this._bookKeeper.largestRange.count/e}static _removeRange(e){null!==e.prev?null!==e.next?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:null!==e.next&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,null!==t.next&&(t.next.prev=e)}}const Ze=["FILL","LINE","MARKER","TEXT","LABEL"];class Ne{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const t in e){this._freeListsAndStorage[t]={vtxFreeList:i?new He(i):null,idxFreeList:i?new He(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const s in e[t])this._freeListsAndStorage[t].vertexBuffers[s]={data:i?N(i,e[t][s]):null,stride:e[t][s]}}}static fromTileData(e,t){const s=function(e){const t=e.getStrides(),s={};for(let e=0;e<t.length;e++)s[Ze[e]]=t[e];return s}(e),i=[0,0,0,0,0],r=[0,0,0,0,0],o=e.tileDisplayData.displayObjects;for(const e of o)for(const t of e.displayRecords)i[t.geometryType]=Math.max(i[t.geometryType],t.vertexFrom+t.vertexCount),r[t.geometryType]=Math.max(r[t.geometryType],t.indexFrom+t.indexCount);const n=new Ne(s,e.tileDisplayData.displayList,t,null);for(let t=0;t<e.tileBufferData.geometries.length;++t){const s=i[t],o=r[t],a=e.tileBufferData.geometries[t],l=Ze[t],d=n._storageFor(l),h=e.tileBufferData.geometries[t].indexBuffer;let c;d.indexBuffer=h,d.idxFreeList=new He(h.length),d.idxFreeList.allocate(o);for(const s in a.vertexBuffer){const i=e.tileBufferData.geometries[t].vertexBuffer[s];d.vertexBuffers[s].data=i.data,d.vertexBuffers[s].stride=i.stride;const r=X(i.stride),o=i.data.length*r/i.stride;c||(c=o)}d.vtxFreeList=new He(c),d.vtxFreeList.allocate(s)}return n}delete(e){const t=Ze[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const o=Ze[e.geometryType];let n,a;e.meshData=null,void 0===e.vertexFrom?(a=t.vertexCount,n=this._allocateVertices(o,a)):t.vertexCount>e.vertexCount?(this._freeVertices(o,e.vertexFrom,e.vertexCount),a=t.vertexCount,n=this._allocateVertices(o,a)):t.vertexCount===e.vertexCount?(n=e.vertexFrom,a=e.vertexCount):(this._freeVertices(o,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),n=e.vertexFrom,a=t.vertexCount);let l,d,h,c=!0;if(void 0===e.indexFrom?(l=r,h=t.indexCount,d=this._allocateIndices(o,h)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom,e.indexCount),h=t.indexCount,d=this._allocateIndices(o,h)):t.indexCount===e.indexCount?(c=!1,d=e.indexFrom,h=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),d=e.indexFrom,h=t.indexCount),-1!==n&&-1!==d){const r=this._storageFor(o);if(Y(n,d,r.vertexBuffers,r.indexBuffer,t,s,i),e.vertexFrom=n,e.indexFrom=d,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,e.vertexFrom,e.vertexCount)}return c&&this._displayList.addToList(e,l),!0}return-1!==n&&this._freeVertices(o,n,a),-1!==d&&this._freeIndices(o,d,h),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=Ze[e.geometryType],o=this._allocateVertices(r,e.vertexCount);if(-1===o)return this._freeVertices(r,o,e.vertexCount),!1;const n=this._allocateIndices(r,e.indexCount);if(-1===n)return this._freeVertices(r,o,e.vertexCount),this._freeIndices(r,n,e.indexCount),!1;const a=this._storageFor(r);if(Y(o,n,a.vertexBuffers,a.indexBuffer,e,s,i),e.vertexFrom=o,e.indexFrom=n,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,o,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList.allocate(t);if(-1===i)return-1;return s.vtxFreeList.fragmentation>.5?-1:i}_freeVertices(e,t,s){this._storageFor(e).vtxFreeList.free(t,s)}_freeIndices(e,t,s){this._storageFor(e).idxFreeList.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList.allocate(t);if(-1===i)return-1;return s.idxFreeList.fragmentation>.5?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class Xe{constructor(e){this.geometryMap=Z((()=>({indexBuffer:ee.createIndex(e,35044),vao:null})),((t,s)=>({vertexBuffer:ee.createVertex(e,Q[s])})))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const e in t.buffers)t.buffers[e]&&t.buffers[e].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{draw(e,s,i,r,o){if(!t.data.vao){const r={};for(const e in t.buffers)r[e]=t.buffers[e].data.vertexBuffer;t.data.vao=new te(e,i,s,r,t.data.indexBuffer)}const n=t.data.vao;e.bindVAO(n),e.drawElements(4,o,5125,Uint32Array.BYTES_PER_ELEMENT*r),e.bindVAO(null)}}}has(e){return null!=this.geometryMap[e]}upload(e,t){t.forEach(((t,s)=>{this._upload(t,s,e)}))}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):null!=e.indices.from&&null!=e.indices.count&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const e in i){const r=i[e];r.allDirty?this._uploadVertices(s,t,e):null!=r.from&&null!=r.count&&this._uploadVertices(s,t,e,r.from,r.count)}}}_uploadVertices(e,t,s,i,r){const o=this.geometryMap[t];if(!o)return;const n=e.geometries[t].vertexBuffer[s];if(!n)return;const a=n.stride,l=n.data.buffer;o.buffers[s]&&l.byteLength>0&&(null!=i&&null!=r?o.buffers[s].data.vertexBuffer.setSubData(l,i*a,i*a,(i+r)*a):o.buffers[s].data.vertexBuffer.setData(l))}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const o=e.geometries[t].indexBuffer.buffer;r.data.indexBuffer&&o.byteLength>0&&(null!=s&&null!=i?r.data.indexBuffer.setSubData(o,4*s,4*s,4*(s+i)):r.data.indexBuffer.setData(o))}}class Ye extends se{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new Ee}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){var e;return null!=(e=this._displayObjects)?e:[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(!0===e.clear)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new Ee,this._dispRecStore=Ne.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new Xe(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=Ne.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const e of s)null!=e.insertAfter&&i.push(e.id);for(const e of i){const t=this._data.tileDisplayData.displayObjectRegistry.get(e);if(t){this._data.tileDisplayData.displayList.removeFromList(t.displayRecords);for(const e of t.displayRecords)this._dispRecStore.delete(e);this._data.tileDisplayData.displayObjectRegistry.delete(e);const s=this._data.tileDisplayData.displayObjects.indexOf(t);this._data.tileDisplayData.displayObjects.splice(s,1)}}for(const i of s){let s,r=this._data.tileDisplayData.displayObjectRegistry.get(i.id);if(r){const e=r.displayRecords;r.set(i),r.displayRecords=e;const t=r.displayRecords.length;for(let e=0;e<t;++e){const t=r.displayRecords[e],s=i.displayRecords[e];(e>=i.displayRecords.length||t.geometryType!==s.geometryType||t.symbolLevel!==s.symbolLevel||t.zOrder!==s.zOrder||t.materialKey!==s.materialKey)&&(this._dispRecStore.delete(r.displayRecords[e]),e<i.displayRecords.length&&(r.displayRecords[e]=void 0))}r.displayRecords.length=i.displayRecords.length}else{let e;r=i.copy(),r.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(i.id,r);const t=this._data.tileDisplayData.displayObjects;if(null!=r.insertAfter)if(s={},r.insertAfter>=0){const s=this._data.tileDisplayData.displayObjectRegistry.get(r.insertAfter);s?(e=t.indexOf(s)+1,e<t.length?t.splice(e,0,r):(t.push(r),e=t.length)):(t.push(r),e=t.length)}else t.unshift(r),e=0;else t.push(r),e=t.length;if(s){const r=i.displayRecords.length>0?1:0;let o=0;for(let i=e-1;i>=0&&o<r;--i)for(let e=t[i].displayRecords.length-1;e>=0&&o<r;--e){const r=t[i].displayRecords[e],n=this._data.tileDisplayData.displayList.getDPInfoType();s[n]||(s[n]=r,++o)}}}const o=i.displayRecords.length;for(let n=0;n<o;++n){const o=i.displayRecords[n];let a=r.displayRecords[n];a?(a.meshData=o.meshData,a.materialKey=o.materialKey):(a=o.copy(),a.vertexFrom=void 0,a.indexFrom=void 0,r.displayRecords[n]=a);const l=o.geometryType,d=this._data.tileDisplayData.displayList.getDPInfoType(),h=e.addOrUpdate.tileBufferData.geometries[l],c=h.vertexBuffer,u=h.indexBuffer;let f;s&&(f=s[d]?this._data.tileDisplayData.displayList.splitAfter(s[d]):-1),t=this._dispRecStore.setMeshData(a,o,c,u,f)&&t,s&&null!=a.indexFrom&&null!=a.indexFrom&&(s[d]=a)}}return t}}class Qe{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}class We{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new We;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const e in s.vertexBuffer){const{data:t,stride:r}=s.vertexBuffer[e];i.vertexBuffer[e]={data:t.slice(),stride:r}}}return e}static deserialize(e){const t=new We;for(let s=0;s<5;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:W(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<5;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<5;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function Je(e,t,s,...i){t<e.length?e.splice(t,s,...i):e.push(...i)}const $e=new Map;$e.set(re.MAP,[oe.FILL,oe.LINE,oe.MARKER,oe.TEXT]),$e.set(re.LABEL,[oe.LABEL]),$e.set(re.LABEL_ALPHA,[oe.LABEL]);class et{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const i=r.geometryDPInfo.unified;if(i)for(const r of i){const i=e.painter.getGeometryBrush(r.geometryType),o=t.getGeometry(r.geometryType),n={geometryType:r.geometryType,materialKey:r.materialKey,indexFrom:r.indexFrom,indexCount:r.indexCount,draw:(e,t,s)=>{o.draw(e,t,s,r.indexFrom,r.indexCount)}};i.prepareState(e,t),i.drawGeometry(e,t,n,s)}}}get empty(){return!this.symbolLevels||0===this.symbolLevels.length}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new et;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const s=t[r];if(s.geometryType===e.geometryType&&i>s.indexFrom&&i<=s.indexFrom+s.indexCount){if(i<s.indexFrom+s.indexCount){const e=new tt;e.geometryType=s.geometryType,e.materialKey=s.materialKey,e.indexFrom=i,e.indexCount=s.indexFrom+s.indexCount-i,t.splice(r+1,0,e),s.indexCount=i-s.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),o=null!=t?t:r.length-1,n=o>=0&&o<r.length?r[o]:null;if(null!==n&&n.materialKey===e.materialKey&&n.indexFrom+n.indexCount===e.indexFrom&&n.geometryType===e.geometryType)n.indexCount+=e.indexCount;else{const t=new tt;t.indexFrom=e.indexFrom,t.indexCount=e.indexCount,t.materialKey=e.materialKey,t.geometryType=e.geometryType,Je(r,o+1,0,t)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let o;for(let t=0;t<r;++t){const s=i[t];if(e.indexFrom+e.indexCount>s.indexFrom&&e.indexFrom<s.indexFrom+s.indexCount&&s.geometryType===e.geometryType){o=t;break}}if(void 0!==o){const t=i[o];if(e.indexFrom===t.indexFrom)return t.indexCount-=e.indexCount,t.indexFrom+=e.indexCount,0===t.indexCount&&Je(i,o,1),o-1;if(e.indexFrom+e.indexCount===t.indexFrom+t.indexCount)return t.indexCount-=e.indexCount,0===t.indexCount?(Je(i,o,1),o-1):o;{const s=t.indexFrom,r=e.indexFrom-t.indexFrom,n=e.indexCount,a=t.indexFrom+t.indexCount-(e.indexFrom+e.indexCount);t.indexCount=r;const l=new tt;return l.geometryType=t.geometryType,l.materialKey=t.materialKey,l.indexFrom=s+r+n,l.indexCount=a,Je(i,o+1,0,l),o}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let t=0;t<i;t++)if(this.symbolLevels[t].symbolLevel===e){s=this.symbolLevels[t];break}let r;s||(s=new rt,s.symbolLevel=e,this.symbolLevels.push(s));const o=s.zLevels.length;for(let e=0;e<o;e++)if(s.zLevels[e].zLevel===t){r=s.zLevels[e];break}return r||(r=new it,r.geometryDPInfo=new st,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class tt{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new tt;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class st{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new st;return e.fill=this.fill&&this.fill.map((e=>e.clone())),e.line=this.line&&this.line.map((e=>e.clone())),e.marker=this.marker&&this.marker.map((e=>e.clone())),e.text=this.text&&this.text.map((e=>e.clone())),e.label=this.label&&this.label.map((e=>e.clone())),e.unified=this.unified&&this.unified.map((e=>e.clone())),e}}class it{constructor(){this.geometryDPInfo=new st}clone(){const e=new it;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class rt{constructor(){this.zLevels=[]}clone(){const e=new rt;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class ot{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const t in e)this.vertexData.set(t,e[t]);for(const t in this.vertexData)null===e[t]&&this.vertexData.delete(t);this.vertexCount=t,this.indexData=s}}class nt{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0}get sortKey(){return void 0===this._sortKey&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new nt(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new ot;for(const s in t){const r=t[s].stride,o=t[s].data,n=[],a=X(r);for(let t=0;t<r*e.vertexCount/a;++t)n[t]=o[t+r*e.vertexFrom/a];i.vertexData.set(s,n)}i.indexData.length=0;for(let t=0;t<e.indexCount;++t)i.indexData[t]=s[t+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new ot;for(const t in e){const s=e[t].stride,i=e[t].data,r=[],o=X(s);for(let e=0;e<s*this.vertexCount/o;++e)r[e]=i[e+s*this.vertexFrom/o];this.meshData.vertexData.set(t,r)}this.meshData.indexData.length=0;for(let e=0;e<this.indexCount;++e)this.meshData.indexData[e]=t[e+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){for(const s in t){const i=t[s].stride,r=this.meshData.vertexData.get(s),o=t[s].data,n=X(i);for(let t=0;t<i*this.meshData.vertexCount/n;++t)o[t+i*e/n]=r[t]}for(let t=0;t<this.meshData.indexData.length;++t)i[t+s]=this.meshData.indexData[t]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const o of e)o.writeMeshDataToBuffers(i,t,r,s),i+=o.vertexCount,r+=o.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new nt(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function at(e,t){if(null!==t){e.push(t.length);for(const s of t)s.serialize(e);return e}e.push(0)}class lt{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new lt(this.id);return e.set(this),e}clone(){const e=new lt(this.id);return e.displayRecords=this.displayRecords.map((e=>e.clone())),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),at(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new lt(t),i={id:t};return s.displayRecords=function(e,t,s){const i=e.readInt32(),r=new Array(i);for(let i=0;i<r.length;i++)r[i]=t.deserialize(e,s);return r}(e,nt,i),s}}class dt{constructor(){}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new et;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new dt;return this.displayObjects&&(e.displayObjects=this.displayObjects.map((e=>e.clone()))),e}serialize(e){return at(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let t=0;t<s.length;++t){const r=lt.deserialize(e);s[t]=r,i.set(r.id,r)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new dt;return t._deserializeObjects(e),t}}class ht{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=W(e.data,e.stride),s=e.stride;return new ht(t,s)}static fromVertexVector(e){const t=W(e.data.buffer(),e.stride),s=e.stride;return new ht(t,s)}}class ct{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const t in e.namedBuffers)i[t]=ht.decode(e.namedBuffers[t]);return new ct(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=W(e.vertices,e.stride),r=e.stride,o={geometry:new ht(i,r)};return new ct(t,s,o)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const t in e.namedVectors)i[t]=ht.fromVertexVector(e.namedVectors[t]);return new ct(t,s,i)}}class ut{constructor(e,t){this.data=e,this.stride=t}get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class ft{constructor(e,t,s=!1){this.geometryType=e,this.indexVector=new G(Uint32Array,6*t),this.namedVectors={};const i=J(e,s);for(const e in i){const s=i[e];let r;switch(s%4){case 0:case 2:r=new G(Uint32Array,s*t);break;case 1:case 3:r=new G(Uint8Array,s*t)}this.namedVectors[e]=new ut(r,s)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const e in this.namedVectors){const s=this.namedVectors[e];i[e]={},s.transfer(i[e],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=ct.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const pt=new Qe,mt=new Qe;function yt(e,t){const s={};for(const i in e){const r={data:N(t,e[i]),stride:e[i]};s[i]=r}return s}class gt{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){pt.reset();const e=function(e){const t=[[],[],[],[],[]],s=e;for(const e of s)for(const s of e.displayRecords)t[s.geometryType].push(s);return t}(this.tileDisplayData.displayObjects);for(const t of e)for(const e of t)e&&pt.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const t=e.length,s=new We;for(let e=0;e<t;++e){s.geometries[e].indexBuffer=new Uint32Array(Math.round(1.5*pt.indicesFor(e)));const t=[];for(const s in this.tileBufferData.geometries[e].vertexBuffer)t.push(this.tileBufferData.geometries[e].vertexBuffer[s].stride);const i=gt._computeVertexAlignment(t),r=Math.round(1.5*pt.verticesFor(e)),o=gt._align(r,i);for(const t in this.tileBufferData.geometries[e].vertexBuffer){const i=this.tileBufferData.geometries[e].vertexBuffer[t].stride;s.geometries[e].vertexBuffer[t]={stride:i,data:N(o,i)}}}mt.reset(),this.tileDisplayData.displayList.clear();for(let i=0;i<t;++i){const t=e[i];for(const e of t){if(e.meshData)e.writeMeshDataToBuffers(mt.verticesFor(i),s.geometries[i].vertexBuffer,mt.indicesFor(i),s.geometries[i].indexBuffer),e.meshData=null;else{const t=this.tileBufferData.geometries[i].vertexBuffer,r=this.tileBufferData.geometries[i].indexBuffer,o=s.geometries[i].vertexBuffer,n=s.geometries[i].indexBuffer,a=mt.verticesFor(i),l=mt.indicesFor(i);Y(a,l,o,n,e,t,r),e.vertexFrom=a,e.indexFrom=l}mt.needMore(i,e.vertexCount,e.indexCount)}}for(const e of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(e.displayRecords);this.tileBufferData=s}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const s=this.tileBufferData.geometries[t];e[t]={};for(const i in s.vertexBuffer)e[t][i]=s.vertexBuffer[i].stride}return e}clone(){const e=new gt;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4);let s=0;for(let i=0;i<t;i++)s=Math.max(s,e[i].displayRecords.length);return 2*(12*e.length+e.length*s*40)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new G(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},r=new Map;for(const e of t)r.set(e.id,e);return $((t=>{const o=e.data[t];if(i(o)){const e=A.from(o.records).getCursor();for(;e.next();){const s=e.id,i=e.materialKey,o=e.indexFrom,n=e.indexCount,a=e.vertexFrom,l=e.vertexCount,d=r.get(s),h=new nt(s,t,i);h.indexFrom=o,h.indexCount=n,h.vertexFrom=a,h.vertexCount=l,d.displayRecords.push(h)}s[t]=ct.fromVertexData(o,t)}else s[t]=new ft(t,0).intoBuffers()})),gt.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new gt,s=new dt,i=new We;s.displayObjects=e.displayObjects;for(const t in e.vertexBuffersMap){const s=e.vertexBuffersMap[t];i.geometries[t].indexBuffer=s.indexBuffer,i.geometries[t].vertexBuffer=s.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new gt;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new gt;s.tileDisplayData=new dt,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],o=[[],[],[],[],[]];for(const t of e)for(const e of t.displayRecords)o[e.geometryType].push(e),i[e.geometryType]+=e.meshData.vertexCount,r[e.geometryType]+=e.meshData.indexData.length;const n=new We,a=function(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}(t);for(let e=0;e<5;e++){const t=new Uint32Array(r[e]),s=yt(a[e],i[e]);nt.writeAllMeshDataToBuffers(o[e],s,t),n.geometries[e]={indexBuffer:t,vertexBuffer:s}}return s.tileBufferData=n,s}static _align(e,t){const s=e%t;return 0===s?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}class _t extends ve{constructor(e,t){super(e,t,null)}static from(e){const t=Ie.createInstance(),s=[],i=e.filter((e=>!!e.geometry));for(const e of i){const t=C(e.geometry);Te(s,[e],t,!1,!1,"uid")}return new _t(t,s)}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new _t(this.instance,this._features);return this.copyInto(e),e}}const xt=new Ve,vt=new Ve;function bt(e){e.coords.length=0,e.lengths.length=0}class Dt{constructor(){this.bounds=x(),this.graphic=null,this.size=[0,0,0,0]}static acquire(e=null,t,s,i,r,o){let n;return 0===Dt._pool.length?n=new Dt:(n=Dt._pool.pop(),this._set.delete(n)),n.acquire(e,t,s,i,r,o),n}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(F(e.geometry)){const s=e.symbol;if(r(s))return null;if(ae(s.type)||le(s.type)){const s=p(e.geometry);return Oe(t,{},{x:s[0],y:s[1]},!1,!1)}}return null}acquire(e=null,t,s,i,r,o){e&&this.set(e,t,s,i,r,o)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r,o){this.graphic=e,this.geometry=s,this.symbolResource=t,this.resolution=i,this.updateBounds(i,r,o)}updateBounds(e,t,s){de(this.bounds,this.size,this.symbolResource,this.geometry,e,t,s)}getGeometryQuantized(e,t){const s=this.geometry;if(F(s)){const t=s.rings;if(1===t.length&&2===t[0].length)return Ue(e,{paths:[[t[0][0],t[0][1]]]})}else{if(L(s))return bt(xt),bt(vt),Ce(xt,s),Fe(vt,xt,s.hasZ,s.hasM,"esriGeometryPolyline",e.scale[0]),Le(xt,vt,s.hasZ,s.hasM,"esriGeometryPolyline",e),Re(xt,s.hasZ,s.hasM);if(R(s)){const i=.5*this.resolution*this.size[0],r=s.points.filter((e=>v(t,e,i)));return 0===r.length?{points:r}:Ue(e,{points:r})}}return Ue(e,this.geometry)}}Dt._pool=[],Dt._set=new Set;const wt={minX:0,minY:0,maxX:0,maxY:0},Bt=x();function Tt(e,t,s,i,r){return wt.minX=t,wt.minY=s,wt.maxX=i,wt.maxY=r,e.search(wt)}class Ct{constructor(e,t,s,i,r,n){this._graphics=i,this._onAdd=r,this._onRemove=n,this._index=be(9,o("csp-restrictions")?e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}):[".bounds[0]",".bounds[1]",".bounds[2]",".bounds[3]"]),this._itemByGraphic=new Map,this._currentLevel=-1/0,this._tileInfoView=e,this._uidFieldName=s;const a=e.getClosestInfoForScale(t);a&&(this._currentLevel=a.level,this._resolution=this._tileInfoView.getTileResolution(a.level));const l=e.spatialReference;this._metersPerUnit=g(l)?Se(e.spatialReference):1}hitTest(e,t,s,i,r){e=ze(e,this._tileInfoView.spatialReference);const o=.5*i*s;Bt[0]=e-o,Bt[1]=t-o,Bt[2]=e+o,Bt[3]=t+o;const n=.5*i*(s+me),a=Tt(this._index,e-n,t-n,e+n,t+n);if(!a||0===a.length)return[];const l={x:e,y:t},h=[];let c;for(const s of a)if(s.graphic.visible)switch(C(s.geometry)){case"esriGeometryPoint":{const e=s.symbol;if(!e)continue;const t=s.geometry,{x:o,y:n}=t,a=i*this._metersPerUnit;let d;switch(e.type){case"esriTS":d=he(o,n,e,s.size,i,r);break;case"expanded-cim":d=fe(o,n,e,i,a,r);break;case"esriSMS":case"esriPMS":d=ce(o,n,e,i,a,r)}Me(d,l)&&h.push(s)}break;case"esriGeometryPolyline":{const r=s.symbol;let o=0;if("expanded-cim"===r.type){const e=r.layers;if(!e||0===e.length)continue;const t=e.findIndex((e=>"line"===e.type));if(-1===t)continue;const s=e[t];o=Ae(s.width,null,null)}else{const e=r.layers;if(!e||0===e.length)continue;o=e[0].width}c=1.5*i*window.devicePixelRatio*d(o),ue(s.geometry,e,t,c)&&h.push(s)}break;case"esriGeometryEnvelope":{const e=s.geometry,t=b(e.xmin,e.ymin,e.xmax,e.ymax);D(t,Bt)&&h.push(s);break}case"esriGeometryPolygon":{if(Me(s.geometry,l)){h.push(s);break}const e=je(s.geometry);if(Math.abs(e.ymax-e.ymin)<5*i||Math.abs(e.xmax-e.xmin)<5*i){const t=b(e.xmin,e.ymin,e.xmax,e.ymax);D(t,Bt)&&h.push(s)}break}case"esriGeometryMultipoint":{const e=s.symbol;if(!e)continue;const t=s.geometry.points;let o;for(let n=0;n<t.length;n++)if(o="esriTS"===e.type?he(t[n][0],t[n][1],e,s.size,i,r):ce(t[n][0],t[n][1],e,i,i*this._metersPerUnit,r),Me(o,l)){h.push(s);break}break}}return h.sort(((e,t)=>{const s=pe(e.graphic),i=pe(t.graphic);return s===i?t.zorder-e.zorder:s-i})),h.map((e=>e.graphic))}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(0===i.length||0===s.length)return[];i.sort(((e,t)=>e.zorder-t.zorder)),i[0].insertAfter=-1;for(let e=1;e<i.length;e++)i[e].insertAfter=i[e-1].graphic.uid;i.sort(((e,t)=>e.graphic.uid-t.graphic.uid)),s.sort(((e,t)=>e.uid-t.uid));let r,o=0,n=0;const a=[],l={originPosition:"upperLeft",scale:[t.resolution,t.resolution],translate:[t.bounds[0],t.bounds[3]]};for(const d of s){for(n=-2;o<i.length;)if(r=i[o],o++,d.uid===r.graphic.uid){n=r.insertAfter;break}if(!r.geometry||-2===n)continue;const s=r.getGeometryQuantized(l,t.bounds),h={...r.graphic.attributes};h[this._uidFieldName]=d.uid,null==r.groupId&&(r.groupId=e.createTemplateGroup(r.symbol,null)),a.push({centroid:Dt.getCentroidQuantized(r,l),geometry:s,attributes:h,symbol:r.symbol,groupId:r.groupId,insertAfter:n,zorder:r.zorder})}return a.sort(((e,t)=>e.zorder-t.zorder)),a}queryTileData(e,t){const{bounds:s,resolution:i}=t,r=this._searchForItems(t),o=[];return 0===r.length||this._createTileGraphics(o,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t.bounds),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){return this._itemByGraphic.has(e)?this._itemByGraphic.get(e).bounds:null}addOrModify(e,t,s){if(!e)return;this.has(e)&&this.remove(e),this._onAdd(e);const i=Dt.acquire(e,t,s,this._resolution,this._resolution*this._metersPerUnit,this._tileInfoView.spatialReference);return this._itemByGraphic.set(e,i),s&&this._index.insert(i),i.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=w(i.bounds);return i.size[0]=i.size[1]=0,this._index.remove(i),i.set(e,t,s,this._resolution,this._resolution*this._metersPerUnit,this._tileInfoView.spatialReference),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._currentLevel===e)return;this._currentLevel=e;const t=this._tileInfoView,s=t.getTileResolution(e);this._resolution=s,this._index.clear();const i=this._itemByGraphic,r=[];for(const[e,s]of i)s.updateBounds(this._resolution,this._resolution*this._metersPerUnit,t.spatialReference),s.geometry&&r.push(s);this._index.load(r)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const o=this._uidFieldName;let n,a,l,d;s.sort(((e,t)=>e.zorder-t.zorder));for(let h=0;h<s.length;h++){l=s[h],n=l.graphic,a=l.getGeometryQuantized(i,r),d=0===h?-1:s[h-1].graphic.uid;const c={...l.graphic.attributes};c[o]=n.uid,null==l.groupId&&(l.groupId=t.createTemplateGroup(l.symbol,null)),e.push({centroid:Dt.getCentroidQuantized(l,i),geometry:a,attributes:c,symbol:l.symbol,groupId:l.groupId,insertAfter:d,zorder:l.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds;if(t.isWrappable){const[i,r]=Ge(t),o=Math.abs(s[2]-r)<1e-5,n=Math.abs(s[0]-i)<1e-5;if((!o||!n)&&(o||n)){const t=e.resolution;let n;n=x(o?[i,s[1],i+t*me,s[3]]:[r-t*me,s[1],r,s[3]]);const a=Tt(this._index,s[0],s[1],s[2],s[3]),l=Tt(this._index,n[0],n[1],n[2],n[3]);return[...new Set([...a,...l])]}}return Tt(this._index,s[0],s[1],s[2],s[3])}}function Ft(e,t,s){if(s.has(e))return s.get(e);const i={tile:t,addedOrModified:[],removed:[]};return s.set(e,i),i}let Lt=class extends(Pe(s(t))){constructor(e){super(e),this._storage=new De,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._highlightIds=new Map,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashTpExpandedSymbolPromise=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}_createMatcher(e,t){if(e){const s=ye({indexCount:0,fields:{}},"feature",e);this._matcher=O(s,t,null)}}_createDisplayId(e){return this._displayIds.has(e)||this._displayIds.set(e,this._storage.createDisplayId()),this._displayIds.get(e)}initialize(){this._tileStore=new we(this.view.featuresTilingScheme),this._attributeStore=new Be({type:"local",initialize:e=>Promise.resolve(this.container.attributeView.initialize(e)),update:e=>this.container.attributeView.requestUpdate(e),render:()=>this.container.requestRender()},ke());this._graphicStore=new Ct(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,(e=>{this._createDisplayId(e.uid),this._setFilterState(e.uid,e.visible)}),(e=>{const t=this._displayIds.get(e.uid);this._displayIds.delete(e.uid),this._storage.releaseDisplayId(t)}));const e=new U(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._createMatcher(this.renderer,e),this._meshFactory=new V(null,this.uid,e),this._templateStore=e,this.watch("renderer",(t=>{this._createMatcher(t,e);for(const e of this.graphics)this._pendingUpdate.updated.add(e);this.requestUpdate()})),this._tileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",(e=>this._graphicsChangeHandler(e))),"graphics"),this._attached=!0,this.notifyChange("updating")}))}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._tileStore.destroy(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(e,t){if(!this.view||!this.view.position)return Promise.resolve(null);const s=this.view.toMap(h(e,t));return this.searchFeatures(s).then((e=>e&&e.length?e[0]:null))}async searchFeatures(e,t=2){return this._graphicStore.hitTest(e.x,e.y,t,this.view.state.resolution,this.view.state.rotation)}update(e){n(this._controller.signal);const t=e.state,s=this.view.featuresTilingScheme.getClosestInfoForScale(t.scale).level;if(this._graphicStore.updateLevel(s),this._tileStore.setViewState(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}graphicUpdateHandler(e){const{graphic:t,property:s,newValue:i}=e;switch(s){case"attributes":break;case"geometry":case"symbol":this._pendingUpdate.updated.add(t),this.requestUpdate();break;case"visible":this._setFilterState(t.uid,i),this._attributeStore.sendUpdates()}}addHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}removeHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;0===e?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys()),t=e.map((e=>this._displayIds.get(e)));this._attributeStore.setHighlight(e,t)}_getIntersectingTiles(e){const t=this._graphicStore.getBounds(e);if(!t||0===B(t)||0===T(t))return[];const s=ge(t,this.view.spatialReference);return i(s)?[...this._tileStore.boundsIntersections(s[0]),...this._tileStore.boundsIntersections(s[1])]:this._tileStore.boundsIntersections(t)}async _updateTile(e){n(this._controller.signal);const t=e.tile,s=this._getGraphicsData(this._templateStore,t,e.addedOrModified),i=await this._processGraphics(t,s);return n(this._controller.signal),this._patchTile(t.key,{type:"update",addOrUpdate:i,remove:e.removed,end:!0,clear:!1}),i}_patchTile(e,t){if(!this._tiles.has(e))return;const s=this._tiles.get(e);this.container.onTileData(s,t),this.container.requestRender()}_graphicsChangeHandler(e){const t=this._pendingUpdate;for(const s of e.added)t.added.add(s);for(const s of e.moved)t.updated.add(s);for(const s of e.removed)this._pendingUpdate.added.has(s)?t.added.delete(s):t.removed.add(s);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const e={added:[],removed:[],updated:[]};if(!this.graphics)return e;const t=this._pendingUpdate;for(const s of this.graphics.items)t.added.has(s)?e.added.push(s):t.updated.has(s)&&e.updated.push(s);for(const s of t.removed)this._graphicStore.has(s)&&e.removed.push(s);return t.added.clear(),t.removed.clear(),t.updated.clear(),e}async _updateGraphics(){this._processing=!0;const{added:e,removed:t,updated:s}=this._getGraphicsToUpdate(),i=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const e=this.view.state,t=this.view.featuresTilingScheme.getClosestInfoForScale(e.scale).level;this._graphicStore.updateLevel(t),this._tileStore.setViewState(e)}const o=[],n=new Array(e.length+t.length);for(let e=0;e<s.length;e++){const t=s[e],a=this._getIntersectingTiles(t);for(const e of a){r=e.id;Ft(r,e,i).removed.push(this._displayIds.get(t.uid))}o.push(this._updateGraphic(t,null)),n[e]=t}const a=s.length;for(let t=0;t<e.length;t++){const s=e[t];n[a+t]=s,this._graphicsSet.add(s),o.push(this._addGraphic(s))}for(const e of t){this._abortProcessingGraphic(e.uid);const t=this._getIntersectingTiles(e);for(const s of t){r=s.id;Ft(r,s,i).removed.push(this._displayIds.get(e.uid))}this._graphicsSet.delete(e),this._graphicStore.remove(e)}let l;this._flipUpdatingGraphics(),await Promise.all(o);for(let e=0;e<n.length;e++){l=n[e];const t=this._getIntersectingTiles(l);for(const e of t){r=e.id;Ft(r,e,i).addedOrModified.push(l)}}this._graphicStore.updateZ();const d=[];for(const[e,t]of i)d.push(this._updateTile(t));await Promise.all(d)}catch(e){a(e),0}for(const e of t)try{const t=await this._getSymbolForGraphic(e,{});t&&this._hashToExpandedSymbol.delete(t.hash())}catch(e){a(e),0}i.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(e){const t=(e.attributes?Object.keys(e.attributes):[]).map((t=>({name:t,alias:t,type:"string"==typeof e.attributes[t]?"esriFieldTypeString":"esriFieldTypeDouble"})));return r(e.geometry)?null:{geometryType:C(e.geometry),spatialReference:y.fromJSON(e.geometry.spatialReference),fields:t}}async _getSymbolForGraphic(e,t){return n(this._controller.signal),i(e.symbol)?e.symbol:i(this.renderer)?this.renderer.getSymbolAsync(e,{scale:this.view.scale,abortOptions:t}):this._getNullSymbol(e)}async _getSymbolResources(e,t){if(n(this._controller.signal),!this.container.stage)return null;const s=await this._getSymbolForGraphic(e,t),i=s.hash();let r=this._hashToExpandedSymbol.get(i);if(!r){let o=this._hashTpExpandedSymbolPromise.get(i);if(o)r=await o,n(this._controller.signal);else{const a=this._getArcadeInfo(e),l=_e(s);o=P(l,a,t),this._hashTpExpandedSymbolPromise.set(i,o);try{r=await o,this._hashTpExpandedSymbolPromise.delete(i),this._hashToExpandedSymbol.set(i,r)}catch(e){this._hashTpExpandedSymbolPromise.delete(i),n(e)}}}if("esriTS"===r.type){const e=[],[t]=ne(r.text);for(let s=0;s<t.length;s++)e.push(t.charCodeAt(s));const s={symbol:r,id:0,glyphIds:e},[{mosaicItem:i}]=await this.container.getMaterialItems([s]);return{symbol:r,mosaicItem:i}}return{symbol:r,mosaicItem:null}}async _projectAndNormalizeGeometry(e,t){if(n(this._controller.signal),r(e.geometry)||"mesh"===e.geometry.type)return null;let s=e.geometry;if(F(s)){const e=s.rings;s.rings=e}else if(L(s)){const e=s.paths;s.paths=e}else if(I(s)){const i=await this._getSymbolForGraphic(e,t);if(n(this._controller.signal),ae(i.type)||le(i.type)){s=s.center}else s=f.fromExtent(s)}await j(s.spatialReference,this.view.spatialReference);const i=M(s),o=z(i,s.spatialReference,this.view.spatialReference);return m(o),o}_onTileUpdate(e){const t=_(this.view.spatialReference);if(e.added&&e.added.length>0)for(const s of e.added)this._addNewTile(s,t);if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}async _addGraphic(e){this._abortProcessingGraphic(e.uid),n(this._controller.signal);const t=l();this._graphicIdToAbortController.set(e.uid,t);const s={signal:t.signal};try{await this._addOrUpdateGraphic(e,s),n(this._controller.signal),this._graphicIdToAbortController.delete(e.uid)}catch(t){if(this._graphicIdToAbortController.delete(e.uid),!a(t))throw t}}async _updateGraphic(e,t){n(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t),[r,o]=await Promise.all([s,i]);n(this._controller.signal),this._graphicStore.addOrModify(e,o,r)}async _addOrUpdateGraphic(e,t){n(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);try{const[t,r]=await Promise.all([s,i]);n(this._controller.signal),this._addProjectedGraphic(e,r,t)}catch(e){if(!a(e))throw e}}_addProjectedGraphic(e,t,s){this._graphicsSet.has(e)&&this._graphicStore.addOrModify(e,t,s)}_addTile(e){const t=this.view.featuresTilingScheme.getTileBounds(x(),e),s=new Ye(e,t);return this._tiles.set(e,s),this.container.addChild(s),s}_addNewTile(e,t){const s=this._addTile(e.key),i=this._graphicStore.queryTileData(this._templateStore,e);if(t){const s=Math.round((t.valid[1]-t.valid[0])/e.resolution);for(const e of i)e.geometry&&(S(e.geometry)||R(e.geometry))&&this._wrapPoints(e,s)}const r=e.key;this._tileUpdateSet.add(e.key),this.notifyChange("updating"),this._processGraphics(e,i).then((e=>{const t={type:"update",clear:!1,addOrUpdate:e,remove:[],end:!0};s.patch(t),this._tileUpdateSet.delete(r),this.notifyChange("updating")})).catch((e=>{if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!a(e))throw e}))}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_setFilterState(e,t){const s=this._displayIds.get(e),i=this._attributeStore.getHighlightFlag(e);this._attributeStore.setData(s,0,0,i|(t?H:0))}_getGraphicsData(e,t,s){const i=_(this.view.spatialReference),r=this._graphicStore.getGraphicsData(e,t,s);if(i){const e=Math.round((i.valid[1]-i.valid[0])/t.resolution);for(const t of r)t.geometry&&(S(t.geometry)||R(t.geometry))&&this._wrapPoints(t,e)}return r}_wrapPoints(e,t){const s=e.geometry;R(s)?this._wrapMultipoint(s,t):this._wrapPoint(e,t)}_wrapMultipoint(e,t){const s=e.points,i=[];let r=0,o=0;for(const[e,n]of s){if(i.push([e+r,n]),r=0,t===xe){const s=5*me;e+o<s?(i.push([t,0]),r=-t):e+o>xe-s&&(i.push([-t,0]),r=t)}else e+o<-me?(i.push([t,0]),r=-t):e+o>xe+me&&(i.push([-t,0]),r=t);o+=e}e.points=i}_wrapPoint(e,t){const s=e.geometry;if(t===xe){const i=5*me;s.x<i?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>xe-i&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}else s.x<-me?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>xe+me&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}async _processGraphics(e,t,s){if(!(t&&t.length)||!this._meshFactory)return null;const i=_t.from(t),r=this._meshFactory,o=await this._matcher;return await r.analyzeGraphics(i,o,null,null,s),this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(e,i)}_processAnalyzedGraphics(e,t){const s=this._meshFactory,i=t.getSize(),r=t.getCursor(),o={features:i,records:i,metrics:0},n=new k(e.key.id,o,!1,!1,!1),a=[];for(;r.next();){const t=r.readGraphic();t.insertAfter=-1===t.insertAfter?-1:this._displayIds.get(t.insertAfter),t.displayId=this._displayIds.get(t.attributes[this.uid]);const i=new lt(t.displayId);i.insertAfter=t.insertAfter,a.push(i),s.writeGraphic(n,r,e.level)}const l=e.tileInfoView.tileInfo.isWrappable,d=n.serialize(l);if(1!==d.length)return new gt;const h=d[0].message;return gt.fromVertexData(h,a)}_abortProcessingGraphic(e){if(this._graphicIdToAbortController.has(e)){this._graphicIdToAbortController.get(e).abort()}}_getNullSymbol(e){const t=e.geometry;return L(t)?K:F(t)||I(t)?E:q}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};e([c({constructOnly:!0})],Lt.prototype,"requestUpdateCallback",void 0),e([c()],Lt.prototype,"container",void 0),e([c({constructOnly:!0})],Lt.prototype,"graphics",void 0),e([c()],Lt.prototype,"updating",null),e([c()],Lt.prototype,"view",void 0),e([c()],Lt.prototype,"updateRequested",void 0),Lt=e([u("esri.views.2d.layers.support.GraphicsView2D")],Lt);var Rt=Lt;class It extends ie{constructor(e){super(e)}get hasLabels(){return!1}onTileData(e,t){e.patch(t),this.contains(e)||this.addChild(e),this.requestRender()}onTileError(e){e.clear(),this.contains(e)||this.addChild(e)}_renderChildren(e,t){for(const s of this.children)s.isReady&&s.hasData&&(s.commit(e),e.context.setStencilFunction(514,s.stencilRef,255),s._displayList.replay(e,s,t))}}export{Rt as G,It as a};
