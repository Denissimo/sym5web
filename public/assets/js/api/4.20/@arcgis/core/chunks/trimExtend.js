/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{J as e}from"./jsonMap.js";import{getJsonType as t,getGeometryType as r}from"../geometry/support/jsonUtils.js";import i from"../request.js";import{e as s}from"./ensureType.js";import{p as o,a as N}from"./utils5.js";import n from"../rest/support/ProjectParameters.js";function I(e){return{geometryType:t(e[0]),geometries:e.map((e=>e.toJSON()))}}function T(e,t,i){const s=r(t);return e.map((e=>{const t=s.fromJSON(e);return t.spatialReference=i,t}))}const _=new e({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),U={UNIT_METER:9001,UNIT_GERMAN_METER:9031,UNIT_FOOT:9002,UNIT_SURVEY_FOOT:9003,UNIT_CLARKE_FOOT:9005,UNIT_FATHOM:9014,UNIT_NAUTICAL_MILE:9030,UNIT_SURVEY_CHAIN:9033,UNIT_SURVEY_LINK:9034,UNIT_SURVEY_MILE:9035,UNIT_KILOMETER:9036,UNIT_CLARKE_YARD:9037,UNIT_CLARKE_CHAIN:9038,UNIT_CLARKE_LINK:9039,UNIT_SEARS_YARD:9040,UNIT_SEARS_FOOT:9041,UNIT_SEARS_CHAIN:9042,UNIT_SEARS_LINK:9043,UNIT_BENOIT_1895A_YARD:9050,UNIT_BENOIT_1895A_FOOT:9051,UNIT_BENOIT_1895A_CHAIN:9052,UNIT_BENOIT_1895A_LINK:9053,UNIT_BENOIT_1895B_YARD:9060,UNIT_BENOIT_1895B_FOOT:9061,UNIT_BENOIT_1895B_CHAIN:9062,UNIT_BENOIT_1895B_LINK:9063,UNIT_INDIAN_FOOT:9080,UNIT_INDIAN_1937_FOOT:9081,UNIT_INDIAN_1962_FOOT:9082,UNIT_INDIAN_1975_FOOT:9083,UNIT_INDIAN_YARD:9084,UNIT_INDIAN_1937_YARD:9085,UNIT_INDIAN_1962_YARD:9086,UNIT_INDIAN_1975_YARD:9087,UNIT_FOOT_1865:9070,UNIT_RADIAN:9101,UNIT_DEGREE:9102,UNIT_ARCMINUTE:9103,UNIT_ARCSECOND:9104,UNIT_GRAD:9105,UNIT_GON:9106,UNIT_MICRORADIAN:9109,UNIT_ARCMINUTE_CENTESIMAL:9112,UNIT_ARCSECOND_CENTESIMAL:9113,UNIT_MIL6400:9114,UNIT_BRITISH_1936_FOOT:9095,UNIT_GOLDCOAST_FOOT:9094,UNIT_INTERNATIONAL_CHAIN:109003,UNIT_INTERNATIONAL_LINK:109004,UNIT_INTERNATIONAL_YARD:109001,UNIT_STATUTE_MILE:9093,UNIT_SURVEY_YARD:109002,UNIT_50KILOMETER_LENGTH:109030,UNIT_150KILOMETER_LENGTH:109031,UNIT_DECIMETER:109005,UNIT_CENTIMETER:109006,UNIT_MILLIMETER:109007,UNIT_INTERNATIONAL_INCH:109008,UNIT_US_SURVEY_INCH:109009,UNIT_INTERNATIONAL_ROD:109010,UNIT_US_SURVEY_ROD:109011,UNIT_US_NAUTICAL_MILE:109012,UNIT_UK_NAUTICAL_MILE:109013,UNIT_SQUARE_INCHES:"esriSquareInches",UNIT_SQUARE_FEET:"esriSquareFeet",UNIT_SQUARE_YARDS:"esriSquareYards",UNIT_ACRES:"esriAcres",UNIT_SQUARE_MILES:"esriSquareMiles",UNIT_SQUARE_MILLIMETERS:"esriSquareMillimeters",UNIT_SQUARE_CENTIMETERS:"esriSquareCentimeters",UNIT_SQUARE_DECIMETERS:"esriSquareDecimeters",UNIT_SQUARE_METERS:"esriSquareMeters",UNIT_ARES:"esriAres",UNIT_HECTARES:"esriHectares",UNIT_SQUARE_KILOMETERS:"esriSquareKilometers"},a=new e({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});function E(e){const{geometries:r,deviationUnit:i,maxDeviation:s}=e.toJSON(),o={maxDeviation:s};return r&&r.length&&(o.geometries=JSON.stringify({geometryType:t(r[0]),geometries:r}),o.sr=JSON.stringify(r[0].spatialReference)),a.write(i,o,"deviationUnit"),o}const R=new e({preserveShape:"preserve-shape"});function S(e){const{polylines:t,lengthUnit:r,geodesic:i,calculationType:s}=e.toJSON(),o={};o.polylines=JSON.stringify(t);const N=e.polylines[0].spatialReference;return o.sr=N.wkid?N.wkid:JSON.stringify(N.toJSON()),r&&(o.lengthUnit=r),i&&(o.geodesic=i),s&&(o.calculationType=R.toJSON(s)),o}const A=new e({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),O=new e({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});function m(e){const{geometries:r,bevelRatio:i,offsetDistance:s,offsetHow:o,offsetUnit:N}=e.toJSON(),n={bevelRatio:i,offsetDistance:s};return r&&r.length&&(n.geometries=JSON.stringify({geometryType:t(r[0]),geometries:r}),n.sr=JSON.stringify(r[0].spatialReference)),o&&(n.offsetHow=A.toJSON(o)),N&&(n.offsetUnit=O.toJSON(N)),n}const l=s(n);async function c(e,r,s){r=l(r);const n=o(e),I={...n.query,f:"json",...r.toJSON()},_=r.outSpatialReference,U=t(r.geometries[0]),a=N(I,s);return i(n.path+"/project",a).then((({data:{geometries:e}})=>T(e,U,_)))}const f=new e({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});function u(e){const{geometries1:r,geometries2:i,relation:s,relationParameter:o}=e.toJSON(),N={};if(r&&r.length){N.geometries1=JSON.stringify({geometryType:t(r[0]),geometries:r});const e=r[0].spatialReference;N.sr=e.wkid?e.wkid:JSON.stringify(e)}return i&&i.length>0&&(N.geometries2=JSON.stringify({geometryType:t(i[0]),geometries:i})),s&&(N.relation=f.toJSON(s)),o&&(N.relationParam=o),N}const y=new e({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});function g(e){const{extendHow:t,polylines:r,trimExtendTo:i}=e.toJSON(),s={};return s.extendHow=y.toJSON(t),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),i&&(s.trimExtendTo=JSON.stringify(i)),s}export{_ as c,T as d,I as e,E as g,S as l,m as o,c as p,u as r,g as t,U as u};
