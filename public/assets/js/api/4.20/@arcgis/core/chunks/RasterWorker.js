/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../geometry.js";import r from"../layers/support/PixelBlock.js";import{d as o,R as t}from"./RasterSymbolizer.js";import{f as s,g as e,m as i,j as m}from"./pixelUtils.js";import p from"../geometry/Extent.js";import"./ensureType.js";import"../core/lang.js";import"./Logger.js";import"../config.js";import"./object.js";import"./string.js";import"../geometry/Geometry.js";import"./tslib.es6.js";import"./JSONSupport.js";import"../core/Accessor.js";import"./deprecate.js";import"../core/accessorSupport/decorators/property.js";import"./metadata.js";import"./handleUtils.js";import"./ArrayPool.js";import"../core/accessorSupport/decorators/subclass.js";import"./Message.js";import"./arrayUtils.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../core/Error.js";import"./write.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./writer.js";import"../geometry/Multipoint.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"./Ellipsoid.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"./jsonMap.js";import"../geometry/support/jsonUtils.js";import"./LercCodec.js";import"./colorUtils2.js";import"../layers/support/RasterInfo.js";import"./colorRampUtils.js";import"../Color.js";import"./colorUtils.js";import"./mathUtils.js";export default class{async decode(r){const t=await o(r.data,r.options);return t&&t.toJSON()}symbolize(o){o.pixelBlock=r.fromJSON(o.pixelBlock),o.extent=o.extent?p.fromJSON(o.extent):null;const t=this.symbolizer.symbolize(o);return Promise.resolve(t&&t.toJSON())}async updateSymbolizer(r){var o;this.symbolizer=t.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===(null==(o=this.symbolizer)?void 0:o.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(o){const t=this.symbolizer.simpleStretch(r.fromJSON(o.srcPixelBlock),o.stretchParams);return Promise.resolve(t&&t.toJSON())}estimateStatisticsHistograms(o){const t=s(r.fromJSON(o.srcPixelBlock));return Promise.resolve(t)}split(o){const t=e(r.fromJSON(o.srcPixelBlock),o.tileSize,o.maximumPyramidLevel);return t&&t.forEach(((r,o)=>{t.set(o,null==r?void 0:r.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(o){const t=o.srcPixelBlocks.map((o=>o?new r(o):null)),s=i(t,o.srcMosaicSize,null,null,o.alignmentInfo);if(!o.coefs)return s&&s.toJSON();const e=m(s,o.destDimension,o.coefs,o.sampleSpacing,o.interpolation);return e&&e.toJSON()}}
