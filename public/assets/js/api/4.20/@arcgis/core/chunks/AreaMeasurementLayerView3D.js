/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import{b as t,u as i,j as s,i as r,d as o}from"../core/lang.js";import{property as n}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./Logger.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import{d as l}from"./defaultUnit.js";import{L as h}from"./LayerView3D.js";import p,{e as m}from"../core/Accessor.js";import d from"../core/Handles.js";import{projectVectorToWGS84ComparableLonLat as c,canProjectWithoutEngine as u,canProjectToWGS84ComparableLonLat as g,projectPointToVector as _,projectPointToWGS84ComparableLonLat as y,projectDirection as f,projectVectorToVector as j}from"../geometry/projection.js";import{c as L,g as v,W as b,S as w}from"./projectionEllipsoid.js";import{b as S,d as C,e as P,g as V,f as M,o as D,j as G,n as A,a as x,w as U,q as z,s as R,k as E,a8 as I}from"./mathUtils.js";import{Q as O,m as T,U as F,L as q,G as W,f as k,E as B}from"./Segment.js";import{e as H}from"./earcut.js";import{s as N,d as Q}from"./vec2.js";import{a as $}from"./vec2f64.js";import{a as J}from"./vec4f64.js";import X from"../geometry/SpatialReference.js";import{s as K}from"../geometry/Extent.js";import{geodesicArea as Y}from"../geometry/geometryEngine.js";import Z from"../geometry/Polygon.js";import{inverseGeodeticSolver as ee}from"../geometry/support/geodesicUtils.js";import{p as te,i as ie,t as se}from"./mathUtils2.js";import"../geometry.js";import{E as re}from"./Evented.js";import{init as oe,whenOnce as ne}from"../core/watchUtils.js";import{a as ae,E as le,c as he,C as pe,A as me}from"./AppendVertex.js";import de from"../geometry/Point.js";import{fetchMessageBundle as ce}from"../intl.js";import{c as ue,n as ge,m as _e,j as ye,p as fe}from"./unitUtils.js";import{u as je,i as Le,t as ve}from"./mat4.js";import{c as be}from"./mat4f64.js";import{m as we}from"./viewUtils.js";import{L as Se}from"./LineVisualElement.js";import{O as Ce}from"./Object3DVisualElement.js";import{S as Pe,g as Ve,z as Me,B as De,C as Ge,p as Ae,a as xe,b as Ue,P as ze,D as Re,c as Ee,X as Ie,a1 as Oe,G as Te,H as Fe,a4 as qe,R as We,a8 as ke,ai as Be,a6 as He,a9 as Ne,a0 as Qe}from"./VertexColor.glsl.js";import{D as $e,P as Je}from"./ColorMaterial.js";import{s as Xe,m as Ke,c as Ye,d as Ze}from"./VertexArrayObject.js";import{a as et}from"./lineStippleUtils.js";import{o as tt}from"./locale.js";import it from"../views/layers/LayerView.js";import"./metadata.js";import"./handleUtils.js";import"../config.js";import"./object.js";import"./string.js";import"./Message.js";import"./heightModelInfoUtils.js";import"../core/Error.js";import"../geometry/HeightModelInfo.js";import"./arrayUtils.js";import"./jsonMap.js";import"./JSONSupport.js";import"./write.js";import"./reader.js";import"./writer.js";import"./deprecate.js";import"./ArrayPool.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"./Ellipsoid.js";import"./arcgisLayerUrl.js";import"../core/urlUtils.js";import"./persistableUrlUtils.js";import"../core/Collection.js";import"../geometry/Multipoint.js";import"../geometry/Geometry.js";import"./zmUtils.js";import"../geometry/support/webMercatorUtils.js";import"../core/accessorSupport/decorators/cast.js";import"./pe.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../geometry/Polyline.js";import"./extentUtils.js";import"./aaBoundingRect.js";import"./geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"./screenUtils.js";import"../widgets/Attachments.js";import"./number.js";import"../core/accessorSupport/decorators/aliasOf.js";import"../widgets/Widget.js";import"./domUtils.js";import"./Promise.js";import"./uuid.js";import"./projector.js";import"./widgetUtils.js";import"./jsxWidgetSupport.js";import"../widgets/Attachments/AttachmentsViewModel.js";import"../Graphic.js";import"../PopupTemplate.js";import"../layers/support/fieldUtils.js";import"./domains.js";import"../layers/support/CodedValueDomain.js";import"./enumeration.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"./arcadeOnDemand.js";import"./typeUtils.js";import"../geometry/support/jsonUtils.js";import"../popup/content.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/Content.js";import"../popup/content/CustomContent.js";import"../popup/content/FieldsContent.js";import"../popup/FieldInfo.js";import"../popup/support/FieldInfoFormat.js";import"./date.js";import"../popup/content/MediaContent.js";import"../popup/content/BarChartMediaInfo.js";import"./chartMediaInfoUtils.js";import"./MediaInfo.js";import"../popup/content/support/ChartMediaInfoValue.js";import"../popup/content/support/ChartMediaInfoValueSeries.js";import"../popup/content/ColumnChartMediaInfo.js";import"../popup/content/ImageMediaInfo.js";import"../popup/content/support/ImageMediaInfoValue.js";import"../popup/content/LineChartMediaInfo.js";import"../popup/content/PieChartMediaInfo.js";import"../popup/content/TextContent.js";import"../popup/ExpressionInfo.js";import"../popup/LayerOptions.js";import"../popup/RelatedRecordsInfo.js";import"../popup/support/RelatedRecordsInfoFieldOrder.js";import"../support/actions/ActionBase.js";import"./Identifiable.js";import"../support/actions/ActionButton.js";import"../support/actions/ActionToggle.js";import"../symbols.js";import"../symbols/CIMSymbol.js";import"../symbols/Symbol.js";import"../Color.js";import"./colorUtils.js";import"../symbols/ExtrudeSymbol3DLayer.js";import"../symbols/Symbol3DLayer.js";import"./utils.js";import"../symbols/edges/Edges3D.js";import"./materialUtils.js";import"./opacityUtils.js";import"../symbols/edges/SketchEdges3D.js";import"../symbols/edges/SolidEdges3D.js";import"./Symbol3DMaterial.js";import"../symbols/FillSymbol.js";import"../symbols/SimpleLineSymbol.js";import"../symbols/LineSymbol.js";import"../symbols/LineSymbolMarker.js";import"../symbols/FillSymbol3DLayer.js";import"../symbols/patterns/StylePattern3D.js";import"./colors.js";import"./Symbol3DOutline.js";import"../symbols/Font.js";import"../symbols/IconSymbol3DLayer.js";import"../symbols/LabelSymbol3D.js";import"../symbols/Symbol3D.js";import"./collectionUtils.js";import"../portal/Portal.js";import"./Loadable.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalUser.js";import"../portal/PortalFolder.js";import"../portal/PortalGroup.js";import"../symbols/LineSymbol3DLayer.js";import"../symbols/ObjectSymbol3DLayer.js";import"../symbols/PathSymbol3DLayer.js";import"../symbols/TextSymbol3DLayer.js";import"../symbols/WaterSymbol3DLayer.js";import"./Thumbnail.js";import"./Symbol3DVerticalOffset.js";import"../symbols/callouts/Callout3D.js";import"../symbols/callouts/LineCallout3D.js";import"../symbols/LineSymbol3D.js";import"../symbols/MarkerSymbol.js";import"../symbols/MeshSymbol3D.js";import"../symbols/PictureFillSymbol.js";import"./urlUtils.js";import"../symbols/PictureMarkerSymbol.js";import"../symbols/PointSymbol3D.js";import"../symbols/PolygonSymbol3D.js";import"../symbols/SimpleFillSymbol.js";import"../symbols/SimpleMarkerSymbol.js";import"../symbols/TextSymbol.js";import"../symbols/WebStyleSymbol.js";import"./uid.js";import"../core/HandleOwner.js";import"../rest/query/support/AttachmentInfo.js";import"../rest/support/AttachmentQuery.js";import"./messageBundle.js";import"./jsxFactory.js";import"./VisualElement.js";import"./vectorStacks.js";import"./quatf64.js";import"./geometryEngineBase.js";import"./hydrated.js";import"./vec4.js";import"./vec4f32.js";import"./lineUtils.js";import"./triangulationUtils.js";import"./deduplicate.js";import"./RibbonLineMaterial.js";import"./compilerUtils.js";import"./ElevationProvider.js";import"./lineSegment.js";import"./plane.js";import"./sphere.js";import"./ray.js";import"./InterleavedLayout.js";import"./BufferView.js";import"./types.js";import"./geometryDataUtils.js";import"./triangle.js";import"./Util.js";import"./vec3f32.js";import"./utils4.js";import"./PiUtils.glsl.js";import"./MapUtils.js";import"./vec2f32.js";import"./FramebufferObject.js";import"./Texture.js";import"./Camera.js";import"./frustum.js";import"./Object3D.js";import"./Intersector.js";import"./boundedPlane.js";import"./verticalOffsetUtils.js";import"./mat3.js";import"./quat.js";import"./glUtil.js";import"./PhysicallyBasedRendering.glsl.js";import"./Scheduler.js";import"./PromiseQueue.js";import"./Program.js";import"./mat4f32.js";import"./aaBoundingBox.js";import"./dehydratedFeatures.js";import"./byteSizeEstimations.js";import"./quantizationUtils.js";import"../layers/support/Field.js";import"./fieldType.js";class st{constructor(e,t,i){this.editGeometry=e,this.vertex=t,this.pos=i}apply(){const e=t(this.originalPosition);e&&(this.originalPosition=this.vertex.pos),this._apply(e?"apply":"redo")}undo(){this.vertex.pos=i(this.originalPosition);const e={updatedVertices:[this.vertex],operation:"undo"};this.editGeometry.emit("change",e)}accumulate(e){return e instanceof st&&e.vertex===this.vertex&&(this.pos=e.pos,this._apply("apply"),!0)}_apply(e){this.vertex.pos=this.pos,this.editGeometry.components.forEach((e=>e.unnormalizeVertexPositions()));const t={updatedVertices:[this.vertex],operation:e};this.editGeometry.emit("change",t)}}class rt{constructor(e,t){this.editGeometry=e,this.component=t,this.createdEdge=null}apply(){let e="redo";if(t(this.createdEdge)){e="apply";const i=this.component.getFirstVertex(),s=this.component.getLastVertex();if(this.component.isClosed()||this.component.vertices.length<3||t(i)||t(s))return;this.createdEdge=new ae(this.component,s,i)}this.createdEdge.left.right=this.createdEdge,this.createdEdge.right.left=this.createdEdge,this.component.edges.push(this.createdEdge);const i={operation:e};this.editGeometry.emit("change",i)}undo(){if(t(this.createdEdge))return;this.component.edges.splice(this.component.edges.indexOf(this.createdEdge),1),this.createdEdge.left.right=null,this.createdEdge.right.left=null;this.editGeometry.emit("change",{operation:"undo"})}accumulate(){return!1}}function ot(e,t,i){const s={distance:null};return ee(s,[e[0],e[1]],[t[0],t[1]],i),s.distance}function nt(e,t,i){const s=t[0]-e[0],r=t[1]-e[1],o=i[0]-e[0],n=i[1]-e[1];return.5*Math.abs(s*n-r*o)}function at(e,t,i,s){const r=mt;return c(e,s,lt)&&c(t,s,ht)&&c(i,s,pt)?(r.setPoint(0,0,lt),r.setPoint(0,1,ht),r.setPoint(0,2,pt),Math.abs(Y(r,"square-meters"))):0}const lt=S(),ht=S(),pt=S(),mt=new Z({rings:[[lt,ht,pt]],spatialReference:X.WGS84}),dt=S();class ct{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=S(),this.areaCentroidRenderCoords=S(),this.geodesicAreaCentroidRenderCoords=S(),this._length=0,this._centroidRenderCoords=S(),this._planeWorldCoords=J(),this._worldUp=S(),this._worldTangent=S(),this._frame=[S(),S(),S()],this._pathVersion=-1,this._validMeasurement=!1,this._tempU=S(),this._tempV=S(),this._tempVec3=S(),this._tempSphere={center:S(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,t,i,s){const r=this.unitNormalizer,o=this._sceneView.renderSpatialReference,n=this.unitNormalizer.spatialReference;if(this._pathVersion===e.version&&this._validMeasurement===i)return;this._pathVersion=e.version,this._validMeasurement=i;const a=e.numVertices;this._resize(a);const l=L(t.spatialReference),h=u(t.spatialReference,l)&&g(t.spatialReference),p=this.positionsGeographic,m=this.positionsWorldCoords,d=this.positionsRenderCoords,c=this.positionsSpherical;e.forEachVertexPosition(((e,t)=>{_(e,m[t],n),_(e,d[t],o),h&&(y(e,p[t]),_(e,c[t],l),A(c[t],c[t]))}));const f=this._updatePathLengths(i);if(this.pathLength=this._length>1?new O(r.normalizeDistance(f),"meters"):null,h){const e=this._updateGeodesicPathLengths(i,n);this.geodesicPathLength=this._length>1?new O(e,"meters"):null}else this.geodesicPathLength=null;if(!i)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),void this.geodesicIntersectingSegments.clear();this._updateArea(t,r,o,n,s),h&&this._updateGeodesicArea(t)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,unitNormalizer:this.unitNormalizer}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(S()),this.positionsRenderCoords.push(S()),this.positionsProjectedWorldCoords.push($()),this.positionsFittedRenderCoords.push(S()),this.positionsGeographic.push(S()),this.positionsSpherical.push(S()),this.positionsStereographic.push($()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,i=this.pathSegmentLengths;let s=0;for(let r=0;r<this._length;++r){const o=i[r]=U(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(s+=o)}return s}_updateGeodesicPathLengths(e,t){const i=this.positionsGeographic,s=this.geodesicPathSegmentLengths;let r=0;for(let o=0;o<this._length;++o){const n=s[o]=ot(i[o],i[(o+1)%this._length],t);(o<this._length-1||e)&&(r+=n)}return r}_updateArea(e,t,i,s,r){const o=e.renderCoordsHelper,n=this.positionsWorldCoords,a=this.positionsRenderCoords,l=this.positionsProjectedWorldCoords,h=this.positionsFittedRenderCoords,p=this._planeWorldCoords,m=this._centroidRenderCoords;T(a,m),o.worldUpAtPosition(m,this._worldUp),o.worldBasisAtPosition(m,0,this._worldTangent),f(m,this._worldUp,i,this._worldUp,s),f(m,this._worldTangent,i,this._worldTangent,s),n.length>2&&function(e,t){if(e.length<3)throw new Error("need at least 3 points to fit a plane");te(e[0],e[1],e[2],t)}(n,p),this.fittingMode=this._selectFittingMode(p,n,this._worldUp,r);let d=0;if("horizontal"===this.fittingMode){let e=-1/0;a.forEach(((t,i)=>{const s=o.getAltitude(a[i]);s>e&&(e=s,d=i)}))}const c=n[d];let u=p,g=this._worldTangent;"horizontal"===this.fittingMode?u=this._worldUp:"vertical"===this.fittingMode&&(u=this._tempVec3,g=this._worldUp,ie(p,this._worldUp,u)),G(this._frame[2],u),ie(g,u,this._frame[0]),x(this._frame[1],this._frame[0],this._frame[2]),z(this._frame[1],this._frame[1]);const _=this._tempVec3,y=this._tempU,L=this._tempV;for(let e=0;e<this._length;++e){const t=l[e],r=h[e];R(_,n[e],c),N(t,C(this._frame[0],_),C(this._frame[1],_)),M(y,this._frame[0],t[0]),M(L,this._frame[1],t[1]),V(_,y,L),V(_,_,c),j(_,s,r,i)}this.perimeterLength=this._length>0?new O(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,T(h,this.areaCentroidRenderCoords),j(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,s),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?new O(t.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const t=e.renderCoordsHelper,i=this.positionsSpherical,s=this.positionsStereographic,r=this._tempVec3,o=function(e,t=null,i=!0){const s=(e,t)=>{if(0===t[0]&&0===t[1]&&0===t[2])return!1;for(let i=0;i<e.length;++i)if(C(t,e[i])<-1e-6)return!1;return!0};if(0===e.length)return!1;if(1===e.length)return t&&G(t,e[0]),!0;P(dt,0,0,0);for(let t=0;t<e.length;++t)V(dt,dt,e[t]);if(A(dt,dt),s(e,dt))return t&&G(t,dt),!0;if(!i)return!1;for(let i=0;i<e.length;++i)for(let r=0;r<e.length;++r)if(i!==r&&(x(dt,e[i],e[r]),A(dt,dt),s(e,dt)))return t&&G(t,dt),!0;return!1}(i,r);if(!o)return void(this.geodesicArea=null);const n=this._tempU,a=this._tempV;se(r,n,a);for(let e=0;e<this._length;++e){const t=C(i[e],n),o=C(i[e],a),l=C(i[e],r);N(s[e],t/l,o/l)}M(r,r,v(e.spatialReference).radius),t.toRenderCoords(r,L(e.spatialReference),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=o&&0===this.geodesicIntersectingSegments.size?new O(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let i=0;for(let s=0;s<this._length;++s){i+=t[s]=Q(e[s],e[(s+1)%this._length])}return i}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let i=0;i<this._length;++i)for(let s=i+2;s<this._length;++s){if((s+1)%this._length===i)continue;const r=e[i],o=e[(i+1)%this._length],n=e[s],a=e[(s+1)%this._length];K(r,o,n,a)&&(t.add(i),t.add(s))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=ut(e,2),i=this.triangleIndices=new Uint32Array(H(t,[],2));let s=0;for(let t=0;t<i.length;t+=3)s+=nt(e[i[t]],e[i[t+1]],e[i[t+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let i=0;i<this._length;++i)for(let s=i+2;s<this._length;++s){if((s+1)%this._length===i)continue;const r=e[i],o=e[(i+1)%this._length],n=e[s],a=e[(s+1)%this._length];K(r,o,n,a)&&(t.add(i),t.add(s))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=ut(this.positionsStereographic,2),i=this.geodesicTriangleIndices=new Uint32Array(H(t,[],2));let s=0;for(let t=0;t<i.length;t+=3)s+=at(e[i[t]],e[i[t+1]],e[i[t+2]],X.WGS84);return s}_selectFittingMode(e,t,i,s){const r=t.map((t=>Math.abs(function(e,t){return C(e,t)+e[3]}(e,t)))).reduce(((e,t)=>Math.max(e,t)),0);!function(e,t){const i=t.center;P(i,0,0,0);for(let t=0;t<e.length;++t)V(i,i,e[t]);M(i,i,1/e.length);let s=0;for(let t=0;t<e.length;++t)s=Math.max(s,D(i,e[t]));t.radius=Math.sqrt(s)}(t,this._tempSphere);const o=r/(2*this._tempSphere.radius),n=o<s.maxRelativeErrorCoplanar,a=o<s.maxRelativeErrorAlmostCoplanar;let l="horizontal";if(n)l="oblique";else if(a){l=Math.abs(C(i,e))>Math.cos(E(s.verticalAngleThreshold))?"horizontal":"vertical"}return l}}function ut(e,t){const i=new Float64Array(e.length*t);for(let s=0;s<e.length;++s){const r=e[s];for(let e=0;e<t;++e)i[s*t+e]=r[e]}return i}let gt=class extends p{constructor(e){super(e),this._handles=new d}initialize(){const e=this.view.spatialReference,t=L(e),i=t===w?b:t,s=!e||u(e,i)?i:e,r=new F(s);this._measurementDataManager=new ct(this.view,r),this._handles.add(this.layerViewData.path.on("change",(()=>this._update()))),this._update()}destroy(){this._handles=s(this._handles)}_update(){const e=this.layerViewData;this._measurementDataManager.update(e.path,this.view,e.validMeasurement,{maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80});const t=this._measurementDataManager.getData();this._set("measurementData",t),e.measurementData=t}};e([n({constructOnly:!0})],gt.prototype,"view",void 0),e([n({constructOnly:!0})],gt.prototype,"analysis",void 0),e([n({readOnly:!0})],gt.prototype,"measurementData",void 0),e([n({constructOnly:!0})],gt.prototype,"layerViewData",void 0),gt=e([a("esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementController")],gt);let _t=class extends re.EventedAccessor{constructor(e={}){super(e),this._handles=new d,this._version=0,this._internalGeometryChange=!1}set areaMeasurement(e){this._set("areaMeasurement",e),r(e)&&r(this.view)&&this._initialize(e,this.view)}set view(e){this._set("view",e),r(e)&&r(this.areaMeasurement)&&this._initialize(this.areaMeasurement,e)}get initialized(){return r(this.areaMeasurement)&&r(this.view)}get version(){return this._version}get isValidPolygon(){return this.initialized&&this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}_initialize(e,t){this._handles.removeAll(),this._handles.add(oe(e,"geometry",(()=>this._updateEditGeometryFromModelGeometry(e,t)),!0)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,t){this._version++,this._internalGeometryChange||(this._handles.remove("EditGeometry"),this._editGeometry=r(e.geometry)?le.fromGeometry(e.geometry,t.viewingMode):new le(he(!0,!1,t.spatialReference,t.viewingMode)),this._makeDirty(!0),this.emit("change",{type:"change"}),this._handles.add(this._editGeometry.on("change",(t=>{this._makeDirty(null!=t.addedVertices||null!=t.removedVertices),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.toPolygon():null,this._internalGeometryChange=!1})),"EditGeometry"))}get vertices(){const e=[];return this.forEachVertex((t=>{e.push(t)})),e}get numVertices(){return this.initialized&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get lastPoint(){if(this.initialized&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(r(e))return this._editGeometry.coordinateHelper.createPoint(e.pos)}return null}getVertex(e){if(!this.initialized||0===this._editGeometry.components.length||0===this._editGeometry.components[0].vertices.length)return null;const t=this._editGeometry.components[0].vertices[0];let i=t;do{if(i.index===e)return i;i=i.right.right}while(i!==t&&null!=i);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.createPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.createPoint(this.getVertex(e).pos)}forEachVertex(e){this.initialized&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const t=this._editGeometry.coordinateHelper;this.forEachVertex(((i,s)=>{t.toPoint(i.pos,yt),e(yt,s)}))}clear(){r(this.areaMeasurement)&&(this.areaMeasurement.geometry=null)}add(e){if(!this.initialized)return null;0===this._editGeometry.components.length&&this._editGeometry.components.push(new pe(this._editGeometry));const t=new me(this._editGeometry,this._editGeometry.components[0],this._editGeometry.coordinateHelper.fromPoint(e));return this._editGeometry.apply(t),this.emit("change",{type:"change"}),t}close(){if(!this.initialized)return null;if(0===this._editGeometry.components.length)return null;const e=this._editGeometry.components[0],t=new rt(this._editGeometry,e);return this._editGeometry.apply(t),this.emit("change",{type:"change"}),t}ensureContains(e,t=""){let i=!1;if(this._editGeometry.components.forEach((t=>{t.iterateVertices((t=>{t===e&&(i=!0)}))})),!i)throw new Error(`vertex doesnt exist ${t}`);return i}setVertexPosition(e,t){if(!this.initialized)return null;const i=new st(this._editGeometry,e,this._editGeometry.coordinateHelper.fromPoint(t));return this._editGeometry.apply(i),this.emit("change",{type:"change"}),i}equals(e){if(this.numVertices!==e.numVertices)return!1;let t=!0;return this.forEachVertexPosition(((i,s)=>{const r=e.getVertexPositionAsPointFromIndex(s);i.equals(r)||(t=!1)})),!!t}};e([n({value:null})],_t.prototype,"areaMeasurement",null),e([n({value:null})],_t.prototype,"view",null),e([n()],_t.prototype,"isValidPolygon",null),e([n()],_t.prototype,"numVertices",null),_t=e([a("esri.views.3d.interactive.graphics.AreaMeasurement3D.AreaMeasurement3DPathHelper")],_t);const yt=new de;let ft=class extends p{constructor(){super(...arguments),this.measurementData=null,this.unitNormalizer=new F,this.path=new _t,this.lastDraggedVertex=null}destroy(){this.measurementData=null,this.path=s(this.path)}get validMeasurement(){return this.path.isValidPolygon}};var jt;e([n()],ft.prototype,"measurementData",void 0),e([n()],ft.prototype,"validMeasurement",null),e([n()],ft.prototype,"unitNormalizer",void 0),e([n()],ft.prototype,"path",void 0),e([n()],ft.prototype,"lastDraggedVertex",void 0),e([n()],ft.prototype,"cursorPoint",void 0),ft=e([a("esri.views.3d.layers.analysis.AreaMeasurement3D.AreaMeasurementLayerViewData")],ft),function(e){e.boundingSphere=function(e,t){const i=t.center;P(i,0,0,0);for(let t=0;t<e.length;++t)V(i,i,e[t]);M(i,i,1/e.length);let s=0;for(let t=0;t<e.length;++t)s=Math.max(s,D(i,e[t]));t.radius=Math.sqrt(s)},e.bestFitPlane=function(e,t){if(e.length<3)throw new Error("need at least 3 points to fit a plane");te(e[0],e[1],e[2],t)},e.planePointDistance=function(e,t){return C(e,t)+e[3]},e.segmentLengthEuclidean=function(e,t,i){return _(e,Lt,i)&&_(t,vt,i)?U(Lt,vt):0},e.segmentLengthGeodesic=function(e,t){if(!y(e,Lt)||!y(t,vt))return 0;const i={distance:null};return ee(i,[Lt[0],Lt[1]],[vt[0],vt[1]]),i.distance},e.segmentLengthGeodesicVector=function(e,t,i){const s={distance:null};return ee(s,[e[0],e[1]],[t[0],t[1]],i),s.distance},e.triangleAreaEuclidean=function(e,t,i){const s=t[0]-e[0],r=t[1]-e[1],o=i[0]-e[0],n=i[1]-e[1];return.5*Math.abs(s*n-r*o)},e.triangleAreaGeodesic=function(e,t,i,s){const r=wt;return c(e,s,Lt)&&c(t,s,vt)&&c(i,s,bt)?(r.setPoint(0,0,Lt),r.setPoint(0,1,vt),r.setPoint(0,2,bt),Math.abs(Y(r,"square-meters"))):0},e.tangentFrame=function(e,t,i){Math.abs(e[0])>Math.abs(e[1])?P(t,0,1,0):P(t,1,0,0),x(i,e,t),A(t,t),x(t,i,e),A(i,i)},e.fitHemisphere=function(e,t=null,i=!0){const s=(e,t)=>{if(0===t[0]&&0===t[1]&&0===t[2])return!1;for(let i=0;i<e.length;++i)if(C(t,e[i])<-1e-6)return!1;return!0};if(0===e.length)return!1;if(1===e.length)return t&&G(t,e[0]),!0;P(St,0,0,0);for(let t=0;t<e.length;++t)V(St,St,e[t]);if(A(St,St),s(e,St))return t&&G(t,St),!0;if(!i)return!1;for(let i=0;i<e.length;++i)for(let r=0;r<e.length;++r)if(i!==r&&(x(St,e[i],e[r]),A(St,St),s(e,St)))return t&&G(t,St),!0;return!1},e.compareSets=function(e,t){if(e===t)return!0;if(e.size!==t.size)return!1;for(let i=0;i<e.size;++i)if(!t.has(e[i]))return!1;return!0}}(jt||(jt={}));const Lt=S(),vt=S(),bt=S(),wt=new Z({rings:[[Lt,vt,bt]],spatialReference:X.WGS84}),St=S();var Ct=jt;var Pt=Object.freeze({__proto__:null,build:function(e){const t=new Pe;return t.extensions.add("GL_OES_standard_derivatives"),t.attributes.add("position","vec3"),t.attributes.add("uv0","vec2"),t.vertex.uniforms.add("proj","mat4").add("view","mat4"),t.varyings.add("vUV","vec2"),e.multipassTerrainEnabled&&t.varyings.add("depth","float"),t.vertex.code.add(Ve`
    void main(void) {
      vUV = uv0;
      ${e.multipassTerrainEnabled?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),e.multipassTerrainEnabled&&(t.fragment.include(Me),t.include(De,e)),t.fragment.uniforms.add("size","vec2").add("color1","vec4").add("color2","vec4"),t.fragment.include(Ge),t.fragment.code.add(Ve`
    void main() {
      ${e.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      gl_FragColor = mix(color2, color1, t);
      ${e.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
    }
  `),t}});class Vt extends Ue{initializeProgram(e){const t=Vt.shader.get(),i=this.configuration,s=t.build({OITEnabled:0===i.transparencyPassType,multipassTerrainEnabled:i.multipassTerrainEnabled,cullAboveGround:i.cullAboveGround});return new ze(e.rctx,s,Re)}bindPass(e,t){Ee(this.program,t.camera.projectionMatrix),this.program.setUniform2fv("size",e.size),this.program.setUniform4fv("color1",e.color1),this.program.setUniform4fv("color2",e.color2),t.multipassTerrainEnabled&&(this.program.setUniform2fv("cameraNearFar",t.camera.nearFar),this.program.setUniform2fv("inverseViewport",t.inverseViewport),Ie(this.program,t))}bindDraw(e){Oe(this.program,e)}setPipelineState(e){const t=this.configuration,i=3===e,s=2===e;return Ke({blending:t.transparent?i?Dt:Te(e):null,depthTest:{func:Fe(e)},depthWrite:i?t.writeDepth&&Ye:qe(e),colorWrite:Ze,polygonOffset:i||s?t.polygonOffset&&Mt:{factor:-1,units:-25}})}initializePipeline(){return this.setPipelineState(this.configuration.transparencyPassType)}}Vt.shader=new We(Pt,(()=>Promise.resolve().then((function(){return Pt}))));const Mt={factor:0,units:-25},Dt=Xe(770,1,771,771);class Gt extends xe{constructor(){super(...arguments),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.transparencyPassType=3,this.multipassTerrainEnabled=!1,this.cullAboveGround=!1}}e([Ae()],Gt.prototype,"transparent",void 0),e([Ae()],Gt.prototype,"writeDepth",void 0),e([Ae()],Gt.prototype,"polygonOffset",void 0),e([Ae({count:4})],Gt.prototype,"transparencyPassType",void 0),e([Ae()],Gt.prototype,"multipassTerrainEnabled",void 0),e([Ae()],Gt.prototype,"cullAboveGround",void 0);class At extends ke{constructor(e){super(e,Ut),this.techniqueConfig=new Gt}dispose(){}getPassParameters(){return this.params}getTechniqueConfig(e){return this.techniqueConfig.transparent=this.params.transparent,this.techniqueConfig.writeDepth=this.params.writeDepth,this.techniqueConfig.polygonOffset=this.params.polygonOffset,this.techniqueConfig.transparencyPassType=e?e.transparencyPassType:3,this.techniqueConfig.multipassTerrainEnabled=!!e&&e.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=!!e&&e.cullAboveGround,this.techniqueConfig}intersect(e,t,i,s,r,o,n){return Be(e,t,s,r,o,void 0,n)}getGLMaterial(e){return 0===e.output||7===e.output?new xt(e):void 0}createBufferWriter(){return new $e(Je)}}class xt extends He{constructor(e){super(e),this.updateParameters()}updateParameters(e){this._technique=this._techniqueRep.releaseAndAcquire(Vt,this._material.getTechniqueConfig(e),this._technique)}beginSlot(e){let t=3;return this._technique.configuration.transparent&&(t=this._technique.configuration.writeDepth?5:8),e===t}ensureParameters(e){this.updateParameters(e)}bind(e){this._technique.bindPass(this._material.getPassParameters(),e)}}const Ut={size:[1,1],color1:[.75,.75,.75,1],color2:[.5,.5,.5,1],transparent:!1,writeDepth:!0,polygonOffset:!1,...Ne};class zt extends Ce{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=4,this._geometry=null,this._size=[1,1],this._color1=[1,.5,0,.5],this._color2=[1,1,1,.5],this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.geometryChanged()}get size(){return this._size}set size(e){this._size=e,this.updateMaterial()}get color1(){return this._color1}set color1(e){this._color1=e,this.updateMaterial()}get color2(){return this._color2}set color2(e){this._color2=e,this.updateMaterial()}updateMaterial(){r(this._checkerBoardMaterial)&&this._checkerBoardMaterial.setParameterValues({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new At({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:4})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){r(this._checkerBoardMaterial)&&e(this._checkerBoardMaterial)}createGeometries(e){if(t(this._geometry)||t(this._checkerBoardMaterial))return;const i=Rt;je(i,this.transform);const s=this._geometry,r=[],o=S();s.position.forEach((e=>{R(o,e,i),r.push(o[0],o[1],o[2])}));const n=[];s.uv.forEach((e=>{n.push(e[0],e[1])}));const a=new Qe([["position",{size:3,data:r,exclusive:!0}],["uv0",{size:2,data:n,exclusive:!0}]],[["position",s.triangleIndices],["uv0",s.triangleIndices]]);e.addGeometry(a,this._checkerBoardMaterial)}geometryChanged(){this.recreateGeometry()}}const Rt=S();let Et=class extends p{constructor(e){super(e),this._handles=new d,this._params={...It},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=S(),this._originTransform=be(),this._cursorPositionRenderSpace=S(),this.messages=null,this.viewData=Ot,this.areaLabel=null,this.perimeterLengthLabel=null,this.mode="auto",this.geodesicMeasurementDistanceThreshold=1e5}get visible(){return this.layerView.visible&&!this.layerView.suspended}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}initialize(){const e=this.view;this._path=new Se({view:e,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new Se({view:e,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new Se({view:e,attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new Se({view:e,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new Se({view:e,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:et(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._measurementArea=new zt({view:e,attached:!0,color1:this._params.areaColor1,color2:this._params.areaColor2}),this._areaLabel=new q({view:this.view,attached:!0,fontSize:16}),this._pathLengthLabel=new q({view:e,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new q({view:e,attached:!0,fontSize:12}),this._perimeterLengthLabel=new q({view:e,attached:!0,fontSize:12});const t=this.layerView,i=t.layerViewData;this._handles.add([m((()=>[this.mode,this.visible,t.unit,i.measurementData,i.cursorPoint]),(()=>this._update())),m((()=>{var t;return null==(t=e.state)?void 0:t.camera}),(()=>this._updateLabels())),tt((async()=>this._updateMessageBundle()))]),this._updateMessageBundle()}destroy(){this._measurementArea.destroy(),this._measurementArea=null,this._path.destroy(),this._path=null,this._intersectedPath.destroy(),this._intersectedPath=null,this._perimeter.destroy(),this._perimeter=null,this._intersectedPerimeter.destroy(),this._intersectedPerimeter=null,this._areaLabel.destroy(),this._areaLabel=null,this._pathLengthLabel.destroy(),this._pathLengthLabel=null,this._cursorSegmentLengthLabel.destroy(),this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel.destroy(),this._perimeterLengthLabel=null,this.set("view",null)}async whenMessages(){await ne(this,"messages")}_update(){if(this.destroyed)return;const e=this.layerView.layerViewData.measurementData;t(e)||(this._updateViewData(e,this.layerView.layerViewData.path,this.layerView.layerViewData.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,i){const s=t.isValidPolygon,o=t.lastPoint,n=r(o)&&r(i)?new O(Ct.segmentLengthGeodesic(o,i),"meters"):null,a=r(o)&&r(i)?new O(e.unitNormalizer.normalizeDistance(Ct.segmentLengthEuclidean(o,i,e.unitNormalizer.spatialReference)),"meters"):null;let l;if("auto"===this.mode){l="euclidean";(e.geodesicPathLength?e.geodesicPathLength.value:0)+(!s&&r(n)?n.value:0)>this.geodesicMeasurementDistanceThreshold&&(l="geodesic")}else l=this.mode;null==e.geodesicPathLength&&(l="euclidean");const h="geodesic"===l,p=h?e.geodesicArea:e.area;let m=1;if(p){const t=this._toPreferredAreaUnit(p,this.layerView.unit);m=I(Math.sqrt(t.value)/Math.sqrt(300)),m*=Math.sqrt(ue(1,t.unit,"square-meters")),m/=e.unitNormalizer.normalizeDistance(1)}const d={validMeasurement:s,path:t,pathVersion:t.version,cursorPoint:i,measurementData:e,mode:l,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:h?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:h?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:h?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:s?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:m,geodesicCursorSegmentLength:n,cursorSegmentLength:a};this._set("viewData",d)}_updateOrigin(){const e=this.viewData;we(e.positionsRenderCoords,this._origin),Le(this._originTransform),ve(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,i=t.path,s=this.view.renderCoordsHelper.spatialReference,r=t.mode,o=[],n=[],a=[],l=t.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<l;++h){const l=t[e][h],p=t[e][(h+1)%i.numVertices];let m=null;switch(r){case"euclidean":m=new B(l,p);break;case"geodesic":m=new W(l,p,s)}t.intersectingSegments.has(h)?a.push(m):n.push(m),o.push(m)}return{all:o,nonIntersecting:n,intersecting:a}}_updatePathSegments(){const e=this.visible,t=this.viewData,i=this._createSegments("positionsRenderCoords"),s=t.path,o=!s.isValidPolygon,n=t.cursorPoint,a=this.view.renderCoordsHelper,l=a.spatialReference,h=t.mode;if(this._cursorSegment=null,s.numVertices>0&&o&&r(n)){if(a.toRenderCoords(n,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[s.numVertices-1],r=this._cursorPositionRenderSpace;let o=null;switch(h){case"euclidean":o=new B(e,r);break;case"geodesic":o=new W(e,r,l)}i.nonIntersecting.push(o),this._cursorSegment=o}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=i.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,i=e.path,s=e.mode;if(i.numVertices>0&&e.validMeasurement&&"euclidean"===s){const s=[];for(let t=0;t<i.numVertices;++t){const i=S();R(i,e.positionsRenderCoords[t],this._origin);const r=S();R(r,e.positionsFittedRenderCoords[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const e=this.viewData,t=e.path;if(!t)return;const s=e.measurementData,o=e.mode,n=!t.isValidPolygon,a=this.visible,l=this._formatAreaLabel(this.messages,"geodesic"===o?s.geodesicArea:s.area,this.layerView.unit);r(l)?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=l,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&a):this._areaLabel.visible=!1,this._set("areaLabel",i(l));const h=this._formatLengthLabel(this.messages,"geodesic"===o?s.geodesicPathLength:s.pathLength,this.layerView.unit);if(r(h)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const i=this._pathSegments[e.pathLengthLabelSegmentIndex],s=r(this._cursorSegment)?this._cursorSegment:Tt;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:i,right:s},this._pathLengthLabel.text=h,this._pathLengthLabel.visible=n&&t.numVertices>0&&a}else this._pathLengthLabel.visible=!1;const p="geodesic"===o?e.geodesicCursorSegmentLength:e.cursorSegmentLength;if(r(p)){const e=this._formatLengthLabel(this.messages,p,this.layerView.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=r(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=i(e),this._cursorSegmentLengthLabel.visible=n&&0!==p.value&&a}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const m="geodesic"===e.mode,d=m?s.geodesicPathLength:s.perimeterLength,c=i(null!=d?this._formatLengthLabel(this.messages,d,this.layerView.unit):null);if(this._set("perimeterLengthLabel",i(c)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=c,this._perimeterLengthLabel.visible=!0;let t=!0;for(let i=0;i<e.path.numVertices;++i){const s=(e.perimeterLengthLabelSegmentIndex+i)%e.path.numVertices,r=m?this._pathSegments[s]:this._perimeterSegments[s];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&a}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return e.toUnit(this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case"metric":return _e(e.value,e.unit);case"imperial":return ge(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const i=this._deriveLengthUnitFromAreaUnit(t);switch(i){case"metric":return fe(e.value,e.unit);case"imperial":return ye(e.value,e.unit);default:return i}}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":return"metric";case"imperial":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"acres":return"imperial";case"ares":case"hectares":return"metric"}throw new Error("unhandled area unit")}_formatAreaLabel(e,t,i){return e&&t&&k(e,t,this._preferredAreaUnit(t,i))}_formatLengthLabel(e,t,i){return e&&t&&k(e,t,this._preferredLengthUnit(t,i))}_updateMessageBundle(){ce("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()}))}};e([n()],Et.prototype,"view",void 0),e([n()],Et.prototype,"messages",void 0),e([n()],Et.prototype,"analysis",void 0),e([n()],Et.prototype,"viewData",void 0),e([n()],Et.prototype,"layerView",void 0),e([n({readOnly:!0})],Et.prototype,"areaLabel",void 0),e([n({readOnly:!0})],Et.prototype,"perimeterLengthLabel",void 0),e([n()],Et.prototype,"mode",void 0),e([n({readOnly:!0})],Et.prototype,"visible",null),e([n()],Et.prototype,"geodesicMeasurementDistanceThreshold",void 0),Et=e([a("esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementView")],Et);const It={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25},Ot={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,geodesicCursorSegmentLength:null,cursorSegmentLength:null},Tt=new B(S(),S());let Ft=class extends(h(it)){constructor(e){super(e),this.type="area-measurement-3d",this.layerViewData=new ft,this._userUnit=null}set unit(e){this._userUnit=e}get unit(){return o(this._userUnit,this._defaultUnit)}get result(){if(r(this.layerViewData.measurementData)){const e=this.layerViewData.measurementData;return{area:e.area,geodesicArea:e.geodesicArea,pathLength:e.pathLength,geodesicPathLength:e.geodesicPathLength,perimeterLength:e.perimeterLength}}return{area:null,geodesicArea:null,pathLength:null,geodesicPathLength:null,perimeterLength:null}}initialize(){this.layerViewData.path.view=this.view,this.layerViewData.path.areaMeasurement=this.layer,this.analysisView=new Et({view:this.view,analysis:this.layer,layerView:this}),this.analysisController=new gt({view:this.view,analysis:this.layer,layerViewData:this.layerViewData})}destroy(){this.analysisController=s(this.analysisController),this.analysisView=s(this.analysisView)}get testData(){return{view:this.analysisView,controller:this.analysisController}}};e([n()],Ft.prototype,"type",void 0),e([n()],Ft.prototype,"analysisView",void 0),e([n()],Ft.prototype,"analysisController",void 0),e([n()],Ft.prototype,"unit",null),e([n()],Ft.prototype,"layer",void 0),e([n()],Ft.prototype,"result",null),e([n()],Ft.prototype,"layerViewData",void 0),e([n(l)],Ft.prototype,"_defaultUnit",void 0),e([n()],Ft.prototype,"_userUnit",void 0),Ft=e([a("esri.views.3d.layers.AreaMeasurementLayerView3D")],Ft);var qt=Ft;export default qt;
